# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import absolute_import

import unittest
import datetime

import pbclient
from pbclient.models.cross_border_quotes_request import CrossBorderQuotesRequest  # noqa: E501
from pbclient.rest import ApiException

class TestCrossBorderQuotesRequest(unittest.TestCase):
    """CrossBorderQuotesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CrossBorderQuotesRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CrossBorderQuotesRequest`
        """
        model = pbclient.models.cross_border_quotes_request.CrossBorderQuotesRequest()  # noqa: E501
        if include_optional :
            return CrossBorderQuotesRequest(
                quote_currency = '', 
                basket_currency = '', 
                from_address = pbclient.models.address.Address(
                    address_lines = [
                        ''
                        ], 
                    carrier_route = '', 
                    city_town = '', 
                    company = '', 
                    country_code = '', 
                    delivery_point = '', 
                    email = '', 
                    name = '', 
                    phone = '', 
                    postal_code = '', 
                    residential = True, 
                    state_province = '', 
                    status = 'PARSED', 
                    tax_id = '', 
                    tax_id_type = 'EIN', ), 
                to_address = pbclient.models.address.Address(
                    address_lines = [
                        ''
                        ], 
                    carrier_route = '', 
                    city_town = '', 
                    company = '', 
                    country_code = '', 
                    delivery_point = '', 
                    email = '', 
                    name = '', 
                    phone = '', 
                    postal_code = '', 
                    residential = True, 
                    state_province = '', 
                    status = 'PARSED', 
                    tax_id = '', 
                    tax_id_type = 'EIN', ), 
                basket_items = [
                    pbclient.models.cross_border_quotes_request_basket_items_inner.CrossBorderQuotesRequest_basketItems_inner(
                        item_id = '', 
                        categories = [
                            pbclient.models.cross_border_quotes_request_basket_items_inner_categories_inner.CrossBorderQuotesRequest_basketItems_inner_categories_inner(
                                category_code = '', 
                                descriptions = [
                                    pbclient.models.cross_border_quotes_request_basket_items_inner_categories_inner_descriptions_inner.CrossBorderQuotesRequest_basketItems_inner_categories_inner_descriptions_inner(
                                        locale = '', 
                                        name = '', 
                                        parents_names = [
                                            ''
                                            ], )
                                    ], 
                                parent_category_code = '', 
                                url = '', )
                            ], 
                        description = '', 
                        long_description = '', 
                        unit_weight = pbclient.models.cross_border_quotes_request_basket_items_inner_unit_weight.CrossBorderQuotesRequest_basketItems_inner_unitWeight(
                            weight = 56, 
                            unit_of_measurement = '', ), 
                        item_dimension = pbclient.models.cross_border_quotes_request_basket_items_inner_item_dimension.CrossBorderQuotesRequest_basketItems_inner_itemDimension(
                            length = 56, 
                            height = 1.337, 
                            width = 56, 
                            unit_of_measurement = '', ), 
                        url = '', 
                        quantity = 56, 
                        unit_price = 1.337, 
                        origin_country_code = '', 
                        parent_identifier = '', 
                        child_identifier = '', 
                        kit = '', 
                        kit_identifier = '', 
                        kit_quantity = '', 
                        manufacturer = '', 
                        brand = '', 
                        eccn = '', 
                        enabled = True, 
                        pricing = pbclient.models.cross_border_quotes_request_basket_items_inner_pricing.CrossBorderQuotesRequest_basketItems_inner_pricing(
                            price = 56, 
                            cod_price = [
                                pbclient.models.cross_border_quotes_request_basket_items_inner_pricing_cod_price_inner.CrossBorderQuotesRequest_basketItems_inner_pricing_codPrice_inner(
                                    price = 56, 
                                    cod = '', 
                                    includes_duty = True, 
                                    includes_taxes = True, )
                                ], 
                            dutiable_value = 56, ), 
                        h_s_tariff_code = '', 
                        h_s_tariff_code_country = '', 
                        identifiers = [
                            pbclient.models.cross_border_quotes_request_basket_items_inner_identifiers_inner.CrossBorderQuotesRequest_basketItems_inner_identifiers_inner(
                                number = '', 
                                source = '', )
                            ], 
                        image_urls = [
                            ''
                            ], 
                        ships_alone = True, 
                        attributes = [
                            pbclient.models.cross_border_quotes_request_basket_items_inner_attributes_inner.CrossBorderQuotesRequest_basketItems_inner_attributes_inner(
                                type = '', 
                                name = '', 
                                value = '', )
                            ], 
                        hazmats = [
                            ''
                            ], )
                    ], 
                rates = [
                    pbclient.models.cross_border_quotes_request_rates_inner.CrossBorderQuotesRequest_rates_inner(
                        carrier = 'USPS', 
                        service_id = '', )
                    ], 
                shipment_options = [
                    pbclient.models.carrier_facility_response_carrier_facility_options_inner.CarrierFacilityResponse_carrierFacilityOptions_inner(
                        name = '', 
                        value = '', )
                    ]
            )
        else :
            return CrossBorderQuotesRequest(
                quote_currency = '',
                basket_currency = '',
                to_address = pbclient.models.address.Address(
                    address_lines = [
                        ''
                        ], 
                    carrier_route = '', 
                    city_town = '', 
                    company = '', 
                    country_code = '', 
                    delivery_point = '', 
                    email = '', 
                    name = '', 
                    phone = '', 
                    postal_code = '', 
                    residential = True, 
                    state_province = '', 
                    status = 'PARSED', 
                    tax_id = '', 
                    tax_id_type = 'EIN', ),
                basket_items = [
                    pbclient.models.cross_border_quotes_request_basket_items_inner.CrossBorderQuotesRequest_basketItems_inner(
                        item_id = '', 
                        categories = [
                            pbclient.models.cross_border_quotes_request_basket_items_inner_categories_inner.CrossBorderQuotesRequest_basketItems_inner_categories_inner(
                                category_code = '', 
                                descriptions = [
                                    pbclient.models.cross_border_quotes_request_basket_items_inner_categories_inner_descriptions_inner.CrossBorderQuotesRequest_basketItems_inner_categories_inner_descriptions_inner(
                                        locale = '', 
                                        name = '', 
                                        parents_names = [
                                            ''
                                            ], )
                                    ], 
                                parent_category_code = '', 
                                url = '', )
                            ], 
                        description = '', 
                        long_description = '', 
                        unit_weight = pbclient.models.cross_border_quotes_request_basket_items_inner_unit_weight.CrossBorderQuotesRequest_basketItems_inner_unitWeight(
                            weight = 56, 
                            unit_of_measurement = '', ), 
                        item_dimension = pbclient.models.cross_border_quotes_request_basket_items_inner_item_dimension.CrossBorderQuotesRequest_basketItems_inner_itemDimension(
                            length = 56, 
                            height = 1.337, 
                            width = 56, 
                            unit_of_measurement = '', ), 
                        url = '', 
                        quantity = 56, 
                        unit_price = 1.337, 
                        origin_country_code = '', 
                        parent_identifier = '', 
                        child_identifier = '', 
                        kit = '', 
                        kit_identifier = '', 
                        kit_quantity = '', 
                        manufacturer = '', 
                        brand = '', 
                        eccn = '', 
                        enabled = True, 
                        pricing = pbclient.models.cross_border_quotes_request_basket_items_inner_pricing.CrossBorderQuotesRequest_basketItems_inner_pricing(
                            price = 56, 
                            cod_price = [
                                pbclient.models.cross_border_quotes_request_basket_items_inner_pricing_cod_price_inner.CrossBorderQuotesRequest_basketItems_inner_pricing_codPrice_inner(
                                    price = 56, 
                                    cod = '', 
                                    includes_duty = True, 
                                    includes_taxes = True, )
                                ], 
                            dutiable_value = 56, ), 
                        h_s_tariff_code = '', 
                        h_s_tariff_code_country = '', 
                        identifiers = [
                            pbclient.models.cross_border_quotes_request_basket_items_inner_identifiers_inner.CrossBorderQuotesRequest_basketItems_inner_identifiers_inner(
                                number = '', 
                                source = '', )
                            ], 
                        image_urls = [
                            ''
                            ], 
                        ships_alone = True, 
                        attributes = [
                            pbclient.models.cross_border_quotes_request_basket_items_inner_attributes_inner.CrossBorderQuotesRequest_basketItems_inner_attributes_inner(
                                type = '', 
                                name = '', 
                                value = '', )
                            ], 
                        hazmats = [
                            ''
                            ], )
                    ],
                rates = [
                    pbclient.models.cross_border_quotes_request_rates_inner.CrossBorderQuotesRequest_rates_inner(
                        carrier = 'USPS', 
                        service_id = '', )
                    ],
        )
        """

    def testCrossBorderQuotesRequest(self):
        """Test CrossBorderQuotesRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
