# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictFloat, StrictStr
from pbclient.models.parcel_protection_quote_response_parcel_protection_fees_breakup import ParcelProtectionQuoteResponseParcelProtectionFeesBreakup

class ParcelProtectionQuoteResponse(BaseModel):
    """
    ParcelProtectionQuoteResponse
    """
    parcel_protection_fees: StrictFloat = Field(..., alias="parcelProtectionFees")
    parcel_protection_fees_currency_code: StrictStr = Field(..., alias="parcelProtectionFeesCurrencyCode")
    parcel_protection_fees_breakup: ParcelProtectionQuoteResponseParcelProtectionFeesBreakup = Field(..., alias="parcelProtectionFeesBreakup")
    __properties = ["parcelProtectionFees", "parcelProtectionFeesCurrencyCode", "parcelProtectionFeesBreakup"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ParcelProtectionQuoteResponse:
        """Create an instance of ParcelProtectionQuoteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of parcel_protection_fees_breakup
        if self.parcel_protection_fees_breakup:
            _dict['parcelProtectionFeesBreakup'] = self.parcel_protection_fees_breakup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ParcelProtectionQuoteResponse:
        """Create an instance of ParcelProtectionQuoteResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ParcelProtectionQuoteResponse.parse_obj(obj)

        _obj = ParcelProtectionQuoteResponse.parse_obj({
            "parcel_protection_fees": obj.get("parcelProtectionFees"),
            "parcel_protection_fees_currency_code": obj.get("parcelProtectionFeesCurrencyCode"),
            "parcel_protection_fees_breakup": ParcelProtectionQuoteResponseParcelProtectionFeesBreakup.from_dict(obj.get("parcelProtectionFeesBreakup")) if obj.get("parcelProtectionFeesBreakup") is not None else None
        })
        return _obj

