# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 2.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pbclient.models.carrier import Carrier
from pbclient.models.errors import Errors
from typing import Optional, Set
from typing_extensions import Self

class CancelShipment(BaseModel):
    """
    CancelShipment
    """ # noqa: E501
    cancel_initiator: Optional[StrictStr] = Field(default=None, alias="cancelInitiator")
    carrier: Optional[Carrier] = None
    error_messages: Optional[List[Errors]] = Field(default=None, alias="errorMessages")
    parcel_tracking_number: Optional[StrictStr] = Field(default=None, alias="parcelTrackingNumber")
    status: Optional[StrictStr] = None
    total_carrier_charge: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalCarrierCharge")
    __properties: ClassVar[List[str]] = ["cancelInitiator", "carrier", "errorMessages", "parcelTrackingNumber", "status", "totalCarrierCharge"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CancelShipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_messages (list)
        _items = []
        if self.error_messages:
            for _item in self.error_messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['errorMessages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CancelShipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancelInitiator": obj.get("cancelInitiator"),
            "carrier": obj.get("carrier"),
            "errorMessages": [Errors.from_dict(_item) for _item in obj["errorMessages"]] if obj.get("errorMessages") is not None else None,
            "parcelTrackingNumber": obj.get("parcelTrackingNumber"),
            "status": obj.get("status"),
            "totalCarrierCharge": obj.get("totalCarrierCharge")
        })
        return _obj


