# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.14
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class Tax(BaseModel):
    """
    Tax
    """
    display_name: Optional[StrictStr] = Field(None, alias="displayName")
    name: Optional[StrictStr] = None
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxAmount")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="taxRate")
    __properties = ["displayName", "name", "taxAmount", "taxRate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Tax:
        """Create an instance of Tax from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Tax:
        """Create an instance of Tax from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Tax.parse_obj(obj)

        _obj = Tax.parse_obj({
            "display_name": obj.get("displayName"),
            "name": obj.get("name"),
            "tax_amount": obj.get("taxAmount"),
            "tax_rate": obj.get("taxRate")
        })
        return _obj


