# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.4
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AddTrackingEventsReferencesInnerEventsInner(BaseModel):
    """
    AddTrackingEventsReferencesInnerEventsInner
    """
    event_code: Optional[StrictStr] = Field(default=None, alias="eventCode")
    carrier_event_code: Optional[StrictStr] = Field(default=None, alias="carrierEventCode")
    event_date: Optional[StrictStr] = Field(default=None, alias="eventDate")
    event_time: Optional[StrictStr] = Field(default=None, alias="eventTime")
    event_time_offset: Optional[StrictStr] = Field(default=None, alias="eventTimeOffset")
    event_city: Optional[StrictStr] = Field(default=None, alias="eventCity")
    event_state_or_province: Optional[StrictStr] = Field(default=None, alias="eventStateOrProvince")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    country: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["eventCode", "carrierEventCode", "eventDate", "eventTime", "eventTimeOffset", "eventCity", "eventStateOrProvince", "postalCode", "country"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AddTrackingEventsReferencesInnerEventsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of AddTrackingEventsReferencesInnerEventsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventCode": obj.get("eventCode"),
            "carrierEventCode": obj.get("carrierEventCode"),
            "eventDate": obj.get("eventDate"),
            "eventTime": obj.get("eventTime"),
            "eventTimeOffset": obj.get("eventTimeOffset"),
            "eventCity": obj.get("eventCity"),
            "eventStateOrProvince": obj.get("eventStateOrProvince"),
            "postalCode": obj.get("postalCode"),
            "country": obj.get("country")
        })
        return _obj


