# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from pbclient.models.address import Address
from pbclient.models.carrier import Carrier
from pbclient.models.carrier_facility_response_carrier_facility_options_inner import CarrierFacilityResponseCarrierFacilityOptionsInner
from pbclient.models.carrier_facility_response_carrier_facility_suggestions_inner import CarrierFacilityResponseCarrierFacilitySuggestionsInner

class CarrierFacilityResponse(BaseModel):
    """
    CarrierFacilityResponse
    """
    address: Optional[Address] = None
    carrier: Optional[Carrier] = None
    carrier_facility_options: Optional[conlist(CarrierFacilityResponseCarrierFacilityOptionsInner)] = Field(None, alias="carrierFacilityOptions")
    carrier_facility_suggestions: Optional[conlist(CarrierFacilityResponseCarrierFacilitySuggestionsInner)] = Field(None, alias="carrierFacilitySuggestions")
    __properties = ["address", "carrier", "carrierFacilityOptions", "carrierFacilitySuggestions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CarrierFacilityResponse:
        """Create an instance of CarrierFacilityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in carrier_facility_options (list)
        _items = []
        if self.carrier_facility_options:
            for _item in self.carrier_facility_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['carrierFacilityOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in carrier_facility_suggestions (list)
        _items = []
        if self.carrier_facility_suggestions:
            for _item in self.carrier_facility_suggestions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['carrierFacilitySuggestions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CarrierFacilityResponse:
        """Create an instance of CarrierFacilityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CarrierFacilityResponse.parse_obj(obj)

        _obj = CarrierFacilityResponse.parse_obj({
            "address": Address.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "carrier": obj.get("carrier"),
            "carrier_facility_options": [CarrierFacilityResponseCarrierFacilityOptionsInner.from_dict(_item) for _item in obj.get("carrierFacilityOptions")] if obj.get("carrierFacilityOptions") is not None else None,
            "carrier_facility_suggestions": [CarrierFacilityResponseCarrierFacilitySuggestionsInner.from_dict(_item) for _item in obj.get("carrierFacilitySuggestions")] if obj.get("carrierFacilitySuggestions") is not None else None
        })
        return _obj

