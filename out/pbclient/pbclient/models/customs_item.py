# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.4
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from pbclient.models.address import Address
from pbclient.models.parcel_weight import ParcelWeight
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomsItem(BaseModel):
    """
    CustomsItem
    """
    description: StrictStr
    h_s_tariff_code: Optional[StrictStr] = Field(default=None, alias="hSTariffCode")
    net_cost_method: Optional[StrictStr] = Field(default=None, alias="netCostMethod")
    origin_country_code: StrictStr = Field(alias="originCountryCode")
    origin_state_province: Optional[StrictStr] = Field(default=None, alias="originStateProvince")
    preference_criterion: Optional[StrictStr] = Field(default=None, alias="preferenceCriterion")
    producer_address: Optional[Address] = Field(default=None, alias="producerAddress")
    producer_determination: Optional[StrictStr] = Field(default=None, alias="producerDetermination")
    producer_id: Optional[StrictStr] = Field(default=None, alias="producerId")
    quantity: StrictInt
    quantity_uom: Optional[StrictStr] = Field(default=None, alias="quantityUOM")
    unit_price: Union[StrictFloat, StrictInt] = Field(alias="unitPrice")
    unit_weight: ParcelWeight = Field(alias="unitWeight")
    __properties: ClassVar[List[str]] = ["description", "hSTariffCode", "netCostMethod", "originCountryCode", "originStateProvince", "preferenceCriterion", "producerAddress", "producerDetermination", "producerId", "quantity", "quantityUOM", "unitPrice", "unitWeight"]

    @field_validator('net_cost_method')
    def net_cost_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NO_NET_COST', 'NET_COST'):
            raise ValueError("must be one of enum values ('NO_NET_COST', 'NET_COST')")
        return value

    @field_validator('preference_criterion')
    def preference_criterion_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('A', 'B', 'C', 'D', 'E', 'F'):
            raise ValueError("must be one of enum values ('A', 'B', 'C', 'D', 'E', 'F')")
        return value

    @field_validator('producer_determination')
    def producer_determination_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NO_1', 'NO_2', 'NO_3', 'PD_YES'):
            raise ValueError("must be one of enum values ('NO_1', 'NO_2', 'NO_3', 'PD_YES')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomsItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of producer_address
        if self.producer_address:
            _dict['producerAddress'] = self.producer_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit_weight
        if self.unit_weight:
            _dict['unitWeight'] = self.unit_weight.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of CustomsItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "hSTariffCode": obj.get("hSTariffCode"),
            "netCostMethod": obj.get("netCostMethod"),
            "originCountryCode": obj.get("originCountryCode"),
            "originStateProvince": obj.get("originStateProvince"),
            "preferenceCriterion": obj.get("preferenceCriterion"),
            "producerAddress": Address.from_dict(obj.get("producerAddress")) if obj.get("producerAddress") is not None else None,
            "producerDetermination": obj.get("producerDetermination"),
            "producerId": obj.get("producerId"),
            "quantity": obj.get("quantity"),
            "quantityUOM": obj.get("quantityUOM"),
            "unitPrice": obj.get("unitPrice"),
            "unitWeight": ParcelWeight.from_dict(obj.get("unitWeight")) if obj.get("unitWeight") is not None else None
        })
        return _obj


