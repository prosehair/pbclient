# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.6
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pbclient.models.cross_border_quotes_errors_quote_inner_errors import CrossBorderQuotesErrorsQuoteInnerErrors
from pbclient.models.cross_border_quotes_errors_quote_inner_quote_lines_inner import CrossBorderQuotesErrorsQuoteInnerQuoteLinesInner

class CrossBorderQuotesErrorsQuoteInner(BaseModel):
    """
    CrossBorderQuotesErrorsQuoteInner
    """
    quote_currency: Optional[StrictStr] = Field(None, alias="quoteCurrency")
    quote_lines: Optional[conlist(CrossBorderQuotesErrorsQuoteInnerQuoteLinesInner)] = Field(None, alias="quoteLines")
    errors: Optional[CrossBorderQuotesErrorsQuoteInnerErrors] = None
    __properties = ["quoteCurrency", "quoteLines", "errors"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CrossBorderQuotesErrorsQuoteInner:
        """Create an instance of CrossBorderQuotesErrorsQuoteInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in quote_lines (list)
        _items = []
        if self.quote_lines:
            for _item in self.quote_lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['quoteLines'] = _items
        # override the default output from pydantic by calling `to_dict()` of errors
        if self.errors:
            _dict['errors'] = self.errors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CrossBorderQuotesErrorsQuoteInner:
        """Create an instance of CrossBorderQuotesErrorsQuoteInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CrossBorderQuotesErrorsQuoteInner.parse_obj(obj)

        _obj = CrossBorderQuotesErrorsQuoteInner.parse_obj({
            "quote_currency": obj.get("quoteCurrency"),
            "quote_lines": [CrossBorderQuotesErrorsQuoteInnerQuoteLinesInner.from_dict(_item) for _item in obj.get("quoteLines")] if obj.get("quoteLines") is not None else None,
            "errors": CrossBorderQuotesErrorsQuoteInnerErrors.from_dict(obj.get("errors")) if obj.get("errors") is not None else None
        })
        return _obj


