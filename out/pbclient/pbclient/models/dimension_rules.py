# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.4
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from pbclient.models.dimension_rules_max_parcel_dimensions import DimensionRulesMaxParcelDimensions
from pbclient.models.dimension_rules_min_parcel_dimensions import DimensionRulesMinParcelDimensions
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DimensionRules(BaseModel):
    """
    DimensionRules
    """
    required: Optional[StrictBool] = None
    unit_of_measurement: Optional[StrictStr] = Field(default=None, alias="unitOfMeasurement")
    min_parcel_dimensions: Optional[DimensionRulesMinParcelDimensions] = Field(default=None, alias="minParcelDimensions")
    max_parcel_dimensions: Optional[DimensionRulesMaxParcelDimensions] = Field(default=None, alias="maxParcelDimensions")
    min_length_plus_girth: Optional[StrictInt] = Field(default=None, alias="minLengthPlusGirth")
    max_length_plus_girth: Optional[StrictInt] = Field(default=None, alias="maxLengthPlusGirth")
    __properties: ClassVar[List[str]] = ["required", "unitOfMeasurement", "minParcelDimensions", "maxParcelDimensions", "minLengthPlusGirth", "maxLengthPlusGirth"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DimensionRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of min_parcel_dimensions
        if self.min_parcel_dimensions:
            _dict['minParcelDimensions'] = self.min_parcel_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_parcel_dimensions
        if self.max_parcel_dimensions:
            _dict['maxParcelDimensions'] = self.max_parcel_dimensions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of DimensionRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "required": obj.get("required"),
            "unitOfMeasurement": obj.get("unitOfMeasurement"),
            "minParcelDimensions": DimensionRulesMinParcelDimensions.from_dict(obj.get("minParcelDimensions")) if obj.get("minParcelDimensions") is not None else None,
            "maxParcelDimensions": DimensionRulesMaxParcelDimensions.from_dict(obj.get("maxParcelDimensions")) if obj.get("maxParcelDimensions") is not None else None,
            "minLengthPlusGirth": obj.get("minLengthPlusGirth"),
            "maxLengthPlusGirth": obj.get("maxLengthPlusGirth")
        })
        return _obj


