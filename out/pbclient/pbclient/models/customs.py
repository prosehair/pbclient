# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.14
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from pbclient.models.customs_info import CustomsInfo
from pbclient.models.customs_item import CustomsItem

class Customs(BaseModel):
    """
    Customs
    """
    customs_info: Optional[CustomsInfo] = Field(None, alias="customsInfo")
    customs_items: Optional[conlist(CustomsItem)] = Field(None, alias="customsItems")
    __properties = ["customsInfo", "customsItems"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Customs:
        """Create an instance of Customs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of customs_info
        if self.customs_info:
            _dict['customsInfo'] = self.customs_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in customs_items (list)
        _items = []
        if self.customs_items:
            for _item in self.customs_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customsItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Customs:
        """Create an instance of Customs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Customs.parse_obj(obj)

        _obj = Customs.parse_obj({
            "customs_info": CustomsInfo.from_dict(obj.get("customsInfo")) if obj.get("customsInfo") is not None else None,
            "customs_items": [CustomsItem.from_dict(_item) for _item in obj.get("customsItems")] if obj.get("customsItems") is not None else None
        })
        return _obj


