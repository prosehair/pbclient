# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.12
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from pbclient.models.infectious_substance_contact import InfectiousSubstanceContact
from pbclient.models.radio_activity_detail import RadioActivityDetail
from pbclient.models.radio_nuclide_detail import RadioNuclideDetail

class CommodityInfo(BaseModel):
    """
    CommodityInfo
    """
    cargo_air_craft: Optional[StrictBool] = Field(None, alias="cargoAirCraft")
    hazard_class: Optional[StrictStr] = Field(None, alias="hazardClass")
    infectious_substance_contact: Optional[InfectiousSubstanceContact] = Field(None, alias="infectiousSubstanceContact")
    inner_receptacles_quantity: Optional[StrictInt] = Field(None, alias="innerReceptaclesQuantity")
    inner_receptacles_quantity_uom: Optional[StrictStr] = Field(None, alias="innerReceptaclesQuantityUOM")
    packaging_group: Optional[StrictStr] = Field(None, alias="packagingGroup")
    packaging_instructions: Optional[StrictStr] = Field(None, alias="packagingInstructions")
    percentage: Optional[Union[StrictFloat, StrictInt]] = None
    proper_shipping_name: Optional[StrictStr] = Field(None, alias="properShippingName")
    quantity: Optional[StrictInt] = None
    quantity_uom: Optional[StrictStr] = Field(None, alias="quantityUOM")
    radio_activity_detail: Optional[RadioActivityDetail] = Field(None, alias="radioActivityDetail")
    radio_nuclide_detail: Optional[RadioNuclideDetail] = Field(None, alias="radioNuclideDetail")
    reportable_quantity: Optional[StrictBool] = Field(None, alias="reportableQuantity")
    technical_name: Optional[StrictStr] = Field(None, alias="technicalName")
    un_id: Optional[StrictStr] = Field(None, alias="unId")
    __properties = ["cargoAirCraft", "hazardClass", "infectiousSubstanceContact", "innerReceptaclesQuantity", "innerReceptaclesQuantityUOM", "packagingGroup", "packagingInstructions", "percentage", "properShippingName", "quantity", "quantityUOM", "radioActivityDetail", "radioNuclideDetail", "reportableQuantity", "technicalName", "unId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommodityInfo:
        """Create an instance of CommodityInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of infectious_substance_contact
        if self.infectious_substance_contact:
            _dict['infectiousSubstanceContact'] = self.infectious_substance_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of radio_activity_detail
        if self.radio_activity_detail:
            _dict['radioActivityDetail'] = self.radio_activity_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of radio_nuclide_detail
        if self.radio_nuclide_detail:
            _dict['radioNuclideDetail'] = self.radio_nuclide_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommodityInfo:
        """Create an instance of CommodityInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommodityInfo.parse_obj(obj)

        _obj = CommodityInfo.parse_obj({
            "cargo_air_craft": obj.get("cargoAirCraft"),
            "hazard_class": obj.get("hazardClass"),
            "infectious_substance_contact": InfectiousSubstanceContact.from_dict(obj.get("infectiousSubstanceContact")) if obj.get("infectiousSubstanceContact") is not None else None,
            "inner_receptacles_quantity": obj.get("innerReceptaclesQuantity"),
            "inner_receptacles_quantity_uom": obj.get("innerReceptaclesQuantityUOM"),
            "packaging_group": obj.get("packagingGroup"),
            "packaging_instructions": obj.get("packagingInstructions"),
            "percentage": obj.get("percentage"),
            "proper_shipping_name": obj.get("properShippingName"),
            "quantity": obj.get("quantity"),
            "quantity_uom": obj.get("quantityUOM"),
            "radio_activity_detail": RadioActivityDetail.from_dict(obj.get("radioActivityDetail")) if obj.get("radioActivityDetail") is not None else None,
            "radio_nuclide_detail": RadioNuclideDetail.from_dict(obj.get("radioNuclideDetail")) if obj.get("radioNuclideDetail") is not None else None,
            "reportable_quantity": obj.get("reportableQuantity"),
            "technical_name": obj.get("technicalName"),
            "un_id": obj.get("unId")
        })
        return _obj


