# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class TrackingResponseScanDetailsListInner(BaseModel):
    """
    TrackingResponseScanDetailsListInner
    """
    event_date: Optional[date] = Field(None, alias="eventDate")
    event_time: Optional[StrictStr] = Field(None, alias="eventTime")
    event_city: Optional[StrictStr] = Field(None, alias="eventCity")
    event_state_or_province: Optional[StrictStr] = Field(None, alias="eventStateOrProvince")
    postal_code: Optional[StrictInt] = Field(None, alias="postalCode")
    country: Optional[StrictStr] = None
    scan_type: Optional[StrictStr] = Field(None, alias="scanType")
    scan_description: Optional[StrictStr] = Field(None, alias="scanDescription")
    package_status: Optional[StrictStr] = Field(None, alias="packageStatus")
    __properties = ["eventDate", "eventTime", "eventCity", "eventStateOrProvince", "postalCode", "country", "scanType", "scanDescription", "packageStatus"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TrackingResponseScanDetailsListInner:
        """Create an instance of TrackingResponseScanDetailsListInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TrackingResponseScanDetailsListInner:
        """Create an instance of TrackingResponseScanDetailsListInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TrackingResponseScanDetailsListInner.parse_obj(obj)

        _obj = TrackingResponseScanDetailsListInner.parse_obj({
            "event_date": obj.get("eventDate"),
            "event_time": obj.get("eventTime"),
            "event_city": obj.get("eventCity"),
            "event_state_or_province": obj.get("eventStateOrProvince"),
            "postal_code": obj.get("postalCode"),
            "country": obj.get("country"),
            "scan_type": obj.get("scanType"),
            "scan_description": obj.get("scanDescription"),
            "package_status": obj.get("packageStatus")
        })
        return _obj

