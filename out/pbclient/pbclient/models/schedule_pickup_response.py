# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.4
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from pbclient.models.address import Address
from pbclient.models.carrier import Carrier
from pbclient.models.schedule_pickup_pickup_summary_inner import SchedulePickupPickupSummaryInner
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SchedulePickupResponse(BaseModel):
    """
    SchedulePickupResponse
    """
    pickup_address: Optional[Address] = Field(default=None, alias="pickupAddress")
    carrier: Optional[Carrier] = None
    pickup_summary: Optional[List[SchedulePickupPickupSummaryInner]] = Field(default=None, alias="pickupSummary")
    reference: Optional[StrictStr] = None
    package_location: Optional[StrictStr] = Field(default=None, alias="packageLocation")
    special_instructions: Optional[StrictStr] = Field(default=None, alias="specialInstructions")
    pickup_date_time: Optional[StrictStr] = Field(default=None, alias="pickupDateTime")
    pickup_confirmation_number: Optional[StrictStr] = Field(default=None, alias="pickupConfirmationNumber")
    pickup_id: Optional[StrictStr] = Field(default=None, alias="pickupId")
    __properties: ClassVar[List[str]] = ["pickupAddress", "carrier", "pickupSummary", "reference", "packageLocation", "specialInstructions", "pickupDateTime", "pickupConfirmationNumber", "pickupId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SchedulePickupResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pickup_address
        if self.pickup_address:
            _dict['pickupAddress'] = self.pickup_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pickup_summary (list)
        _items = []
        if self.pickup_summary:
            for _item in self.pickup_summary:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pickupSummary'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of SchedulePickupResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pickupAddress": Address.from_dict(obj.get("pickupAddress")) if obj.get("pickupAddress") is not None else None,
            "carrier": obj.get("carrier"),
            "pickupSummary": [SchedulePickupPickupSummaryInner.from_dict(_item) for _item in obj.get("pickupSummary")] if obj.get("pickupSummary") is not None else None,
            "reference": obj.get("reference"),
            "packageLocation": obj.get("packageLocation"),
            "specialInstructions": obj.get("specialInstructions"),
            "pickupDateTime": obj.get("pickupDateTime"),
            "pickupConfirmationNumber": obj.get("pickupConfirmationNumber"),
            "pickupId": obj.get("pickupId")
        })
        return _obj


