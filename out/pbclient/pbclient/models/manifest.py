# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.5
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from pbclient.models.address import Address
from pbclient.models.carrier import Carrier
from pbclient.models.document import Document
from pbclient.models.parameter import Parameter
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Manifest(BaseModel):
    """
    Manifest
    """
    carrier: Carrier
    documents: Optional[List[Document]] = None
    from_address: Optional[Address] = Field(default=None, alias="fromAddress")
    induction_postal_code: Optional[StrictStr] = Field(default=None, alias="inductionPostalCode")
    manifest_id: Optional[StrictStr] = Field(default=None, alias="manifestId")
    manifest_tracking_number: Optional[StrictStr] = Field(default=None, alias="manifestTrackingNumber")
    parameters: Optional[List[Parameter]] = None
    parcel_tracking_numbers: Optional[List[StrictStr]] = Field(default=None, alias="parcelTrackingNumbers")
    submission_date: StrictStr = Field(alias="submissionDate")
    __properties: ClassVar[List[str]] = ["carrier", "documents", "fromAddress", "inductionPostalCode", "manifestId", "manifestTrackingNumber", "parameters", "parcelTrackingNumbers", "submissionDate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Manifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item in self.documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of from_address
        if self.from_address:
            _dict['fromAddress'] = self.from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of Manifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrier": obj.get("carrier"),
            "documents": [Document.from_dict(_item) for _item in obj.get("documents")] if obj.get("documents") is not None else None,
            "fromAddress": Address.from_dict(obj.get("fromAddress")) if obj.get("fromAddress") is not None else None,
            "inductionPostalCode": obj.get("inductionPostalCode"),
            "manifestId": obj.get("manifestId"),
            "manifestTrackingNumber": obj.get("manifestTrackingNumber"),
            "parameters": [Parameter.from_dict(_item) for _item in obj.get("parameters")] if obj.get("parameters") is not None else None,
            "parcelTrackingNumbers": obj.get("parcelTrackingNumbers"),
            "submissionDate": obj.get("submissionDate")
        })
        return _obj


