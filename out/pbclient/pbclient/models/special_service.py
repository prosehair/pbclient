# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictFloat, StrictStr, conlist
from pbclient.models.parameter import Parameter

class SpecialService(BaseModel):
    """
    SpecialService
    """
    fee: Optional[StrictFloat] = None
    input_parameters: Optional[conlist(Parameter)] = Field(None, alias="inputParameters")
    special_service_id: StrictStr = Field(..., alias="specialServiceId")
    __properties = ["fee", "inputParameters", "specialServiceId"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SpecialService:
        """Create an instance of SpecialService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in input_parameters (list)
        _items = []
        if self.input_parameters:
            for _item in self.input_parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inputParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SpecialService:
        """Create an instance of SpecialService from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SpecialService.parse_obj(obj)

        _obj = SpecialService.parse_obj({
            "fee": obj.get("fee"),
            "input_parameters": [Parameter.from_dict(_item) for _item in obj.get("inputParameters")] if obj.get("inputParameters") is not None else None,
            "special_service_id": obj.get("specialServiceId")
        })
        return _obj

