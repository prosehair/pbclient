# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.5
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from pbclient.models.dimension_rules import DimensionRules
from pbclient.models.parcel_type import ParcelType
from pbclient.models.special_service_codes import SpecialServiceCodes
from pbclient.models.special_services_rule import SpecialServicesRule
from pbclient.models.trackable import Trackable
from pbclient.models.weight_rules import WeightRules
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ParcelTypeRules(BaseModel):
    """
    ParcelTypeRules
    """
    parcel_type: Optional[ParcelType] = Field(default=None, alias="parcelType")
    branded_name: Optional[StrictStr] = Field(default=None, alias="brandedName")
    rate_type_id: Optional[StrictStr] = Field(default=None, alias="rateTypeId")
    rate_type_branded_name: Optional[StrictStr] = Field(default=None, alias="rateTypeBrandedName")
    trackable: Optional[Trackable] = None
    special_services_rule: Optional[List[SpecialServicesRule]] = Field(default=None, alias="specialServicesRule")
    weight_rules: Optional[List[WeightRules]] = Field(default=None, alias="weightRules")
    dimension_rules: Optional[List[DimensionRules]] = Field(default=None, alias="dimensionRules")
    suggested_trackable_special_service_id: Optional[SpecialServiceCodes] = Field(default=None, alias="suggestedTrackableSpecialServiceId")
    __properties: ClassVar[List[str]] = ["parcelType", "brandedName", "rateTypeId", "rateTypeBrandedName", "trackable", "specialServicesRule", "weightRules", "dimensionRules", "suggestedTrackableSpecialServiceId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ParcelTypeRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in special_services_rule (list)
        _items = []
        if self.special_services_rule:
            for _item in self.special_services_rule:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specialServicesRule'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in weight_rules (list)
        _items = []
        if self.weight_rules:
            for _item in self.weight_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['weightRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_rules (list)
        _items = []
        if self.dimension_rules:
            for _item in self.dimension_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dimensionRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of ParcelTypeRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parcelType": obj.get("parcelType"),
            "brandedName": obj.get("brandedName"),
            "rateTypeId": obj.get("rateTypeId"),
            "rateTypeBrandedName": obj.get("rateTypeBrandedName"),
            "trackable": obj.get("trackable"),
            "specialServicesRule": [SpecialServicesRule.from_dict(_item) for _item in obj.get("specialServicesRule")] if obj.get("specialServicesRule") is not None else None,
            "weightRules": [WeightRules.from_dict(_item) for _item in obj.get("weightRules")] if obj.get("weightRules") is not None else None,
            "dimensionRules": [DimensionRules.from_dict(_item) for _item in obj.get("dimensionRules")] if obj.get("dimensionRules") is not None else None,
            "suggestedTrackableSpecialServiceId": obj.get("suggestedTrackableSpecialServiceId")
        })
        return _obj


