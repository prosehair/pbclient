# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.4
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from pbclient.models.parcel_protection_policy_response_content_inner_policy_details import ParcelProtectionPolicyResponseContentInnerPolicyDetails
from pbclient.models.parcel_protection_policy_response_content_inner_shipment_details import ParcelProtectionPolicyResponseContentInnerShipmentDetails
from pbclient.models.parcel_protection_policy_response_content_inner_shipper_info import ParcelProtectionPolicyResponseContentInnerShipperInfo
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ParcelProtectionPolicyResponseContentInner(BaseModel):
    """
    ParcelProtectionPolicyResponseContentInner
    """
    transaction_id: Optional[StrictStr] = Field(default=None, alias="transactionId")
    developer_id: Optional[StrictStr] = Field(default=None, alias="developerId")
    subscription_acc_no: Optional[StrictStr] = Field(default=None, alias="subscriptionAccNo")
    client_transaction_id: Optional[StrictStr] = Field(default=None, alias="clientTransactionId")
    policy_details: Optional[ParcelProtectionPolicyResponseContentInnerPolicyDetails] = Field(default=None, alias="policyDetails")
    shipment_details: Optional[ParcelProtectionPolicyResponseContentInnerShipmentDetails] = Field(default=None, alias="shipmentDetails")
    shipper_info: Optional[ParcelProtectionPolicyResponseContentInnerShipperInfo] = Field(default=None, alias="shipperInfo")
    consignee_info: Optional[ParcelProtectionPolicyResponseContentInnerShipperInfo] = Field(default=None, alias="consigneeInfo")
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    updated_at: Optional[StrictStr] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = ["transactionId", "developerId", "subscriptionAccNo", "clientTransactionId", "policyDetails", "shipmentDetails", "shipperInfo", "consigneeInfo", "createdAt", "updatedAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ParcelProtectionPolicyResponseContentInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of policy_details
        if self.policy_details:
            _dict['policyDetails'] = self.policy_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipment_details
        if self.shipment_details:
            _dict['shipmentDetails'] = self.shipment_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipper_info
        if self.shipper_info:
            _dict['shipperInfo'] = self.shipper_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consignee_info
        if self.consignee_info:
            _dict['consigneeInfo'] = self.consignee_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of ParcelProtectionPolicyResponseContentInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transactionId": obj.get("transactionId"),
            "developerId": obj.get("developerId"),
            "subscriptionAccNo": obj.get("subscriptionAccNo"),
            "clientTransactionId": obj.get("clientTransactionId"),
            "policyDetails": ParcelProtectionPolicyResponseContentInnerPolicyDetails.from_dict(obj.get("policyDetails")) if obj.get("policyDetails") is not None else None,
            "shipmentDetails": ParcelProtectionPolicyResponseContentInnerShipmentDetails.from_dict(obj.get("shipmentDetails")) if obj.get("shipmentDetails") is not None else None,
            "shipperInfo": ParcelProtectionPolicyResponseContentInnerShipperInfo.from_dict(obj.get("shipperInfo")) if obj.get("shipperInfo") is not None else None,
            "consigneeInfo": ParcelProtectionPolicyResponseContentInnerShipperInfo.from_dict(obj.get("consigneeInfo")) if obj.get("consigneeInfo") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


