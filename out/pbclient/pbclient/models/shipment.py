# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.4
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from pbclient.models.additional_address import AdditionalAddress
from pbclient.models.address import Address
from pbclient.models.carrier_payment import CarrierPayment
from pbclient.models.customs import Customs
from pbclient.models.document import Document
from pbclient.models.hazmat_details import HazmatDetails
from pbclient.models.parameter import Parameter
from pbclient.models.parcel import Parcel
from pbclient.models.rate import Rate
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Shipment(BaseModel):
    """
    Shipment
    """
    additional_addresses: Optional[List[AdditionalAddress]] = Field(default=None, alias="additionalAddresses")
    alt_return_address: Optional[Address] = Field(default=None, alias="altReturnAddress")
    carrier_payments: Optional[List[CarrierPayment]] = Field(default=None, alias="carrierPayments")
    customs: Optional[Customs] = None
    documents: Optional[List[Document]] = None
    from_address: Address = Field(alias="fromAddress")
    hazmat_details: Optional[HazmatDetails] = Field(default=None, alias="hazmatDetails")
    parcel: Parcel
    parcel_tracking_number: Optional[StrictStr] = Field(default=None, alias="parcelTrackingNumber")
    rates: List[Rate]
    references: Optional[List[Parameter]] = None
    shipment_id: Optional[StrictStr] = Field(default=None, alias="shipmentId")
    shipment_options: Optional[List[Parameter]] = Field(default=None, alias="shipmentOptions")
    shipment_type: Optional[StrictStr] = Field(default=None, alias="shipmentType")
    sold_to_address: Optional[Address] = Field(default=None, alias="soldToAddress")
    to_address: Address = Field(alias="toAddress")
    __properties: ClassVar[List[str]] = ["additionalAddresses", "altReturnAddress", "carrierPayments", "customs", "documents", "fromAddress", "hazmatDetails", "parcel", "parcelTrackingNumber", "rates", "references", "shipmentId", "shipmentOptions", "shipmentType", "soldToAddress", "toAddress"]

    @field_validator('shipment_type')
    def shipment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('OUTBOUND', 'RETURN'):
            raise ValueError("must be one of enum values ('OUTBOUND', 'RETURN')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Shipment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_addresses (list)
        _items = []
        if self.additional_addresses:
            for _item in self.additional_addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['additionalAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of alt_return_address
        if self.alt_return_address:
            _dict['altReturnAddress'] = self.alt_return_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in carrier_payments (list)
        _items = []
        if self.carrier_payments:
            for _item in self.carrier_payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['carrierPayments'] = _items
        # override the default output from pydantic by calling `to_dict()` of customs
        if self.customs:
            _dict['customs'] = self.customs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item in self.documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of from_address
        if self.from_address:
            _dict['fromAddress'] = self.from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hazmat_details
        if self.hazmat_details:
            _dict['hazmatDetails'] = self.hazmat_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parcel
        if self.parcel:
            _dict['parcel'] = self.parcel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rates (list)
        _items = []
        if self.rates:
            for _item in self.rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in references (list)
        _items = []
        if self.references:
            for _item in self.references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['references'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_options (list)
        _items = []
        if self.shipment_options:
            for _item in self.shipment_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipmentOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of sold_to_address
        if self.sold_to_address:
            _dict['soldToAddress'] = self.sold_to_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_address
        if self.to_address:
            _dict['toAddress'] = self.to_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of Shipment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalAddresses": [AdditionalAddress.from_dict(_item) for _item in obj.get("additionalAddresses")] if obj.get("additionalAddresses") is not None else None,
            "altReturnAddress": Address.from_dict(obj.get("altReturnAddress")) if obj.get("altReturnAddress") is not None else None,
            "carrierPayments": [CarrierPayment.from_dict(_item) for _item in obj.get("carrierPayments")] if obj.get("carrierPayments") is not None else None,
            "customs": Customs.from_dict(obj.get("customs")) if obj.get("customs") is not None else None,
            "documents": [Document.from_dict(_item) for _item in obj.get("documents")] if obj.get("documents") is not None else None,
            "fromAddress": Address.from_dict(obj.get("fromAddress")) if obj.get("fromAddress") is not None else None,
            "hazmatDetails": HazmatDetails.from_dict(obj.get("hazmatDetails")) if obj.get("hazmatDetails") is not None else None,
            "parcel": Parcel.from_dict(obj.get("parcel")) if obj.get("parcel") is not None else None,
            "parcelTrackingNumber": obj.get("parcelTrackingNumber"),
            "rates": [Rate.from_dict(_item) for _item in obj.get("rates")] if obj.get("rates") is not None else None,
            "references": [Parameter.from_dict(_item) for _item in obj.get("references")] if obj.get("references") is not None else None,
            "shipmentId": obj.get("shipmentId"),
            "shipmentOptions": [Parameter.from_dict(_item) for _item in obj.get("shipmentOptions")] if obj.get("shipmentOptions") is not None else None,
            "shipmentType": obj.get("shipmentType"),
            "soldToAddress": Address.from_dict(obj.get("soldToAddress")) if obj.get("soldToAddress") is not None else None,
            "toAddress": Address.from_dict(obj.get("toAddress")) if obj.get("toAddress") is not None else None
        })
        return _obj


