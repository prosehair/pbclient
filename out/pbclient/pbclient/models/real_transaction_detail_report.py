# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 2.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pbclient.models.parameter import Parameter
from pbclient.models.special_service import SpecialService
from typing import Optional, Set
from typing_extensions import Self

class RealTransactionDetailReport(BaseModel):
    """
    RealTransactionDetailReport
    """ # noqa: E501
    adjustment_reason: Optional[StrictStr] = Field(default=None, alias="adjustmentReason")
    credit_card_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="creditCardFee")
    custom_message1: Optional[StrictStr] = Field(default=None, alias="customMessage1")
    custom_message2: Optional[StrictStr] = Field(default=None, alias="customMessage2")
    description: Optional[StrictStr] = None
    destination_address: Optional[StrictStr] = Field(default=None, alias="destinationAddress")
    destination_country: Optional[StrictStr] = Field(default=None, alias="destinationCountry")
    destination_zip: Optional[StrictStr] = Field(default=None, alias="destinationZip")
    developer_id: Optional[StrictStr] = Field(default=None, alias="developerId")
    developer_name: Optional[StrictStr] = Field(default=None, alias="developerName")
    developer_postage_payment_account_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="developerPostagePaymentAccountBalance")
    developer_postage_payment_method: Optional[StrictStr] = Field(default=None, alias="developerPostagePaymentMethod")
    developer_rate_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="developerRateAmount")
    developer_rate_plan: Optional[StrictStr] = Field(default=None, alias="developerRatePlan")
    dimensional_weight_oz: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="dimensionalWeightOz")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    international_country_price_group: Optional[StrictStr] = Field(default=None, alias="internationalCountryPriceGroup")
    label_fee: Optional[StrictStr] = Field(default=None, alias="labelFee")
    mail_class: Optional[StrictStr] = Field(default=None, alias="mailClass")
    merchant_id: Optional[StrictStr] = Field(default=None, alias="merchantId")
    merchant_name: Optional[StrictStr] = Field(default=None, alias="merchantName")
    merchant_postage_account_payment_method: Optional[StrictStr] = Field(default=None, alias="merchantPostageAccountPaymentMethod")
    merchant_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="merchantRate")
    merchant_rate_plan: Optional[StrictStr] = Field(default=None, alias="merchantRatePlan")
    meter_number: Optional[StrictStr] = Field(default=None, alias="meterNumber")
    origin_zip: Optional[StrictStr] = Field(default=None, alias="originZip")
    origination_address: Optional[StrictStr] = Field(default=None, alias="originationAddress")
    package_height_in_inches: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="packageHeightInInches")
    package_length_in_inches: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="packageLengthInInches")
    package_type: Optional[StrictStr] = Field(default=None, alias="packageType")
    package_type_indicator: Optional[StrictStr] = Field(default=None, alias="packageTypeIndicator")
    package_width_in_inches: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="packageWidthInInches")
    parcel_tracking_number: Optional[StrictStr] = Field(default=None, alias="parcelTrackingNumber")
    postage_deposit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="postageDepositAmount")
    print_status: Optional[StrictStr] = Field(default=None, alias="printStatus")
    references: Optional[List[Parameter]] = None
    refund_denial_reason: Optional[StrictStr] = Field(default=None, alias="refundDenialReason")
    refund_requestor: Optional[StrictStr] = Field(default=None, alias="refundRequestor")
    refund_status: Optional[StrictStr] = Field(default=None, alias="refundStatus")
    shipment_id: Optional[StrictStr] = Field(default=None, alias="shipmentId")
    shipper_postage_payment_account_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shipperPostagePaymentAccountBalance")
    special_services: Optional[List[SpecialService]] = Field(default=None, alias="specialServices")
    status: Optional[StrictStr] = None
    transaction_date_time: Optional[datetime] = Field(default=None, alias="transactionDateTime")
    transaction_id: Optional[StrictStr] = Field(default=None, alias="transactionId")
    transaction_type: Optional[StrictStr] = Field(default=None, alias="transactionType")
    value_of_goods: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="valueOfGoods")
    weight_in_ounces: Optional[StrictInt] = Field(default=None, alias="weightInOunces")
    zone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["adjustmentReason", "creditCardFee", "customMessage1", "customMessage2", "description", "destinationAddress", "destinationCountry", "destinationZip", "developerId", "developerName", "developerPostagePaymentAccountBalance", "developerPostagePaymentMethod", "developerRateAmount", "developerRatePlan", "dimensionalWeightOz", "externalId", "internationalCountryPriceGroup", "labelFee", "mailClass", "merchantId", "merchantName", "merchantPostageAccountPaymentMethod", "merchantRate", "merchantRatePlan", "meterNumber", "originZip", "originationAddress", "packageHeightInInches", "packageLengthInInches", "packageType", "packageTypeIndicator", "packageWidthInInches", "parcelTrackingNumber", "postageDepositAmount", "printStatus", "references", "refundDenialReason", "refundRequestor", "refundStatus", "shipmentId", "shipperPostagePaymentAccountBalance", "specialServices", "status", "transactionDateTime", "transactionId", "transactionType", "valueOfGoods", "weightInOunces", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RealTransactionDetailReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in references (list)
        _items = []
        if self.references:
            for _item in self.references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['references'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_services (list)
        _items = []
        if self.special_services:
            for _item in self.special_services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['specialServices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RealTransactionDetailReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustmentReason": obj.get("adjustmentReason"),
            "creditCardFee": obj.get("creditCardFee"),
            "customMessage1": obj.get("customMessage1"),
            "customMessage2": obj.get("customMessage2"),
            "description": obj.get("description"),
            "destinationAddress": obj.get("destinationAddress"),
            "destinationCountry": obj.get("destinationCountry"),
            "destinationZip": obj.get("destinationZip"),
            "developerId": obj.get("developerId"),
            "developerName": obj.get("developerName"),
            "developerPostagePaymentAccountBalance": obj.get("developerPostagePaymentAccountBalance"),
            "developerPostagePaymentMethod": obj.get("developerPostagePaymentMethod"),
            "developerRateAmount": obj.get("developerRateAmount"),
            "developerRatePlan": obj.get("developerRatePlan"),
            "dimensionalWeightOz": obj.get("dimensionalWeightOz"),
            "externalId": obj.get("externalId"),
            "internationalCountryPriceGroup": obj.get("internationalCountryPriceGroup"),
            "labelFee": obj.get("labelFee"),
            "mailClass": obj.get("mailClass"),
            "merchantId": obj.get("merchantId"),
            "merchantName": obj.get("merchantName"),
            "merchantPostageAccountPaymentMethod": obj.get("merchantPostageAccountPaymentMethod"),
            "merchantRate": obj.get("merchantRate"),
            "merchantRatePlan": obj.get("merchantRatePlan"),
            "meterNumber": obj.get("meterNumber"),
            "originZip": obj.get("originZip"),
            "originationAddress": obj.get("originationAddress"),
            "packageHeightInInches": obj.get("packageHeightInInches"),
            "packageLengthInInches": obj.get("packageLengthInInches"),
            "packageType": obj.get("packageType"),
            "packageTypeIndicator": obj.get("packageTypeIndicator"),
            "packageWidthInInches": obj.get("packageWidthInInches"),
            "parcelTrackingNumber": obj.get("parcelTrackingNumber"),
            "postageDepositAmount": obj.get("postageDepositAmount"),
            "printStatus": obj.get("printStatus"),
            "references": [Parameter.from_dict(_item) for _item in obj["references"]] if obj.get("references") is not None else None,
            "refundDenialReason": obj.get("refundDenialReason"),
            "refundRequestor": obj.get("refundRequestor"),
            "refundStatus": obj.get("refundStatus"),
            "shipmentId": obj.get("shipmentId"),
            "shipperPostagePaymentAccountBalance": obj.get("shipperPostagePaymentAccountBalance"),
            "specialServices": [SpecialService.from_dict(_item) for _item in obj["specialServices"]] if obj.get("specialServices") is not None else None,
            "status": obj.get("status"),
            "transactionDateTime": obj.get("transactionDateTime"),
            "transactionId": obj.get("transactionId"),
            "transactionType": obj.get("transactionType"),
            "valueOfGoods": obj.get("valueOfGoods"),
            "weightInOunces": obj.get("weightInOunces"),
            "zone": obj.get("zone")
        })
        return _obj


