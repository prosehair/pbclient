# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.4
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ParcelProtectionPolicyResponseContentInnerPolicyDetails(BaseModel):
    """
    ParcelProtectionPolicyResponseContentInnerPolicyDetails
    """
    policy_id: Optional[StrictStr] = Field(default=None, alias="policyId")
    policy_date: Optional[StrictStr] = Field(default=None, alias="policyDate")
    policy_status: Optional[StrictStr] = Field(default=None, alias="policyStatus")
    claim_status: Optional[StrictStr] = Field(default=None, alias="claimStatus")
    claim_status_update_date: Optional[StrictStr] = Field(default=None, alias="claimStatusUpdateDate")
    value_of_goods: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="valueOfGoods")
    insurance_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="insuranceValue")
    premium_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="premiumValue")
    base_premium: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="basePremium")
    technology_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="technologyFee")
    currency_code: Optional[StrictStr] = Field(default=None, alias="currencyCode")
    mail_class: Optional[StrictStr] = Field(default=None, alias="mailClass")
    mail_class_option: Optional[StrictStr] = Field(default=None, alias="mailClassOption")
    __properties: ClassVar[List[str]] = ["policyId", "policyDate", "policyStatus", "claimStatus", "claimStatusUpdateDate", "valueOfGoods", "insuranceValue", "premiumValue", "basePremium", "technologyFee", "currencyCode", "mailClass", "mailClassOption"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ParcelProtectionPolicyResponseContentInnerPolicyDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if claim_status (nullable) is None
        # and model_fields_set contains the field
        if self.claim_status is None and "claim_status" in self.model_fields_set:
            _dict['claimStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of ParcelProtectionPolicyResponseContentInnerPolicyDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "policyId": obj.get("policyId"),
            "policyDate": obj.get("policyDate"),
            "policyStatus": obj.get("policyStatus"),
            "claimStatus": obj.get("claimStatus"),
            "claimStatusUpdateDate": obj.get("claimStatusUpdateDate"),
            "valueOfGoods": obj.get("valueOfGoods"),
            "insuranceValue": obj.get("insuranceValue"),
            "premiumValue": obj.get("premiumValue"),
            "basePremium": obj.get("basePremium"),
            "technologyFee": obj.get("technologyFee"),
            "currencyCode": obj.get("currencyCode"),
            "mailClass": obj.get("mailClass"),
            "mailClassOption": obj.get("mailClassOption")
        })
        return _obj


