# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.14
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from pbclient.models.parcel_protection_create_request_shipment_info import ParcelProtectionCreateRequestShipmentInfo

class ParcelProtectionCreateRequest(BaseModel):
    """
    ParcelProtectionCreateRequest
    """
    parcel_protection_account_id: Optional[StrictStr] = Field(None, alias="parcelProtectionAccountID")
    parcel_protection_program_id: Optional[StrictStr] = Field(None, alias="parcelProtectionProgramID")
    shipment_info: Optional[ParcelProtectionCreateRequestShipmentInfo] = Field(None, alias="shipmentInfo")
    __properties = ["parcelProtectionAccountID", "parcelProtectionProgramID", "shipmentInfo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ParcelProtectionCreateRequest:
        """Create an instance of ParcelProtectionCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of shipment_info
        if self.shipment_info:
            _dict['shipmentInfo'] = self.shipment_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ParcelProtectionCreateRequest:
        """Create an instance of ParcelProtectionCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ParcelProtectionCreateRequest.parse_obj(obj)

        _obj = ParcelProtectionCreateRequest.parse_obj({
            "parcel_protection_account_id": obj.get("parcelProtectionAccountID"),
            "parcel_protection_program_id": obj.get("parcelProtectionProgramID"),
            "shipment_info": ParcelProtectionCreateRequestShipmentInfo.from_dict(obj.get("shipmentInfo")) if obj.get("shipmentInfo") is not None else None
        })
        return _obj


