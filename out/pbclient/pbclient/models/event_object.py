# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 2.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventObject(BaseModel):
    """
    EventObject
    """ # noqa: E501
    standardized_event_code: Optional[StrictStr] = Field(default=None, alias="standardizedEventCode")
    l1_code: Optional[StrictStr] = Field(default=None, alias="l1Code")
    l1_description: Optional[StrictStr] = Field(default=None, alias="l1Description")
    event_date: Optional[date] = Field(default=None, alias="eventDate")
    event_time: Optional[StrictStr] = Field(default=None, alias="eventTime")
    event_time_offset: Optional[StrictStr] = Field(default=None, alias="eventTimeOffset")
    tracking_url: Optional[StrictStr] = Field(default=None, alias="trackingUrl")
    latitude: Optional[StrictStr] = None
    longitude: Optional[StrictStr] = None
    location_unit: Optional[StrictStr] = Field(default=None, alias="locationUnit")
    event_leg: Optional[StrictStr] = Field(default=None, alias="eventLeg")
    event_type: Optional[StrictStr] = Field(default=None, alias="eventType")
    scan_type: Optional[StrictStr] = Field(default=None, alias="scanType")
    scan_description: Optional[StrictStr] = Field(default=None, alias="scanDescription")
    package_status: Optional[StrictStr] = Field(default=None, alias="packageStatus")
    l2_description: Optional[StrictStr] = Field(default=None, alias="l2Description")
    event_city: Optional[StrictStr] = Field(default=None, alias="eventCity")
    event_state_or_province: Optional[StrictStr] = Field(default=None, alias="eventStateOrProvince")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    country: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["standardizedEventCode", "l1Code", "l1Description", "eventDate", "eventTime", "eventTimeOffset", "trackingUrl", "latitude", "longitude", "locationUnit", "eventLeg", "eventType", "scanType", "scanDescription", "packageStatus", "l2Description", "eventCity", "eventStateOrProvince", "postalCode", "country"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "standardizedEventCode": obj.get("standardizedEventCode"),
            "l1Code": obj.get("l1Code"),
            "l1Description": obj.get("l1Description"),
            "eventDate": obj.get("eventDate"),
            "eventTime": obj.get("eventTime"),
            "eventTimeOffset": obj.get("eventTimeOffset"),
            "trackingUrl": obj.get("trackingUrl"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "locationUnit": obj.get("locationUnit"),
            "eventLeg": obj.get("eventLeg"),
            "eventType": obj.get("eventType"),
            "scanType": obj.get("scanType"),
            "scanDescription": obj.get("scanDescription"),
            "packageStatus": obj.get("packageStatus"),
            "l2Description": obj.get("l2Description"),
            "eventCity": obj.get("eventCity"),
            "eventStateOrProvince": obj.get("eventStateOrProvince"),
            "postalCode": obj.get("postalCode"),
            "country": obj.get("country")
        })
        return _obj


