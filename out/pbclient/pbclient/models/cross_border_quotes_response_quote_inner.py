# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 2.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pbclient.models.cross_border_quotes_response_quote_inner_quote_lines_inner import CrossBorderQuotesResponseQuoteInnerQuoteLinesInner
from pbclient.models.cross_border_quotes_response_quote_inner_total_rates import CrossBorderQuotesResponseQuoteInnerTotalRates
from typing import Optional, Set
from typing_extensions import Self

class CrossBorderQuotesResponseQuoteInner(BaseModel):
    """
    CrossBorderQuotesResponseQuoteInner
    """ # noqa: E501
    quote_currency: Optional[StrictStr] = Field(default=None, alias="quoteCurrency")
    quote_lines: Optional[List[CrossBorderQuotesResponseQuoteInnerQuoteLinesInner]] = Field(default=None, alias="quoteLines")
    total_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalPrice")
    total_rates: Optional[CrossBorderQuotesResponseQuoteInnerTotalRates] = Field(default=None, alias="totalRates")
    __properties: ClassVar[List[str]] = ["quoteCurrency", "quoteLines", "totalPrice", "totalRates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrossBorderQuotesResponseQuoteInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in quote_lines (list)
        _items = []
        if self.quote_lines:
            for _item in self.quote_lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['quoteLines'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_rates
        if self.total_rates:
            _dict['totalRates'] = self.total_rates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrossBorderQuotesResponseQuoteInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteCurrency": obj.get("quoteCurrency"),
            "quoteLines": [CrossBorderQuotesResponseQuoteInnerQuoteLinesInner.from_dict(_item) for _item in obj["quoteLines"]] if obj.get("quoteLines") is not None else None,
            "totalPrice": obj.get("totalPrice"),
            "totalRates": CrossBorderQuotesResponseQuoteInnerTotalRates.from_dict(obj["totalRates"]) if obj.get("totalRates") is not None else None
        })
        return _obj


