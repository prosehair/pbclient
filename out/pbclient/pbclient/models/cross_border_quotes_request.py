# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.8
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pbclient.models.address import Address
from pbclient.models.carrier_facility_response_carrier_facility_options_inner import CarrierFacilityResponseCarrierFacilityOptionsInner
from pbclient.models.cross_border_quotes_request_basket_items_inner import CrossBorderQuotesRequestBasketItemsInner
from pbclient.models.cross_border_quotes_request_rates_inner import CrossBorderQuotesRequestRatesInner

class CrossBorderQuotesRequest(BaseModel):
    """
    CrossBorderQuotesRequest
    """
    quote_currency: StrictStr = Field(..., alias="quoteCurrency", description="The currency to return the quote in. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR")
    basket_currency: StrictStr = Field(..., alias="basketCurrency", description="The default currency of the basket. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR")
    from_address: Optional[Address] = Field(None, alias="fromAddress")
    to_address: Address = Field(..., alias="toAddress")
    basket_items: conlist(CrossBorderQuotesRequestBasketItemsInner) = Field(..., alias="basketItems", description="The items in the buyer's shopping basket.")
    rates: conlist(CrossBorderQuotesRequestRatesInner) = Field(..., description="Specifies the carrier, service, parcel, and other information. In a response, this field also contains the service charges. Importatn- In a request, the rates array can contain only one rates object.")
    shipment_options: Optional[conlist(CarrierFacilityResponseCarrierFacilityOptionsInner)] = Field(None, alias="shipmentOptions")
    __properties = ["quoteCurrency", "basketCurrency", "fromAddress", "toAddress", "basketItems", "rates", "shipmentOptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CrossBorderQuotesRequest:
        """Create an instance of CrossBorderQuotesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of from_address
        if self.from_address:
            _dict['fromAddress'] = self.from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_address
        if self.to_address:
            _dict['toAddress'] = self.to_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in basket_items (list)
        _items = []
        if self.basket_items:
            for _item in self.basket_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['basketItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rates (list)
        _items = []
        if self.rates:
            for _item in self.rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_options (list)
        _items = []
        if self.shipment_options:
            for _item in self.shipment_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipmentOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CrossBorderQuotesRequest:
        """Create an instance of CrossBorderQuotesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CrossBorderQuotesRequest.parse_obj(obj)

        _obj = CrossBorderQuotesRequest.parse_obj({
            "quote_currency": obj.get("quoteCurrency"),
            "basket_currency": obj.get("basketCurrency"),
            "from_address": Address.from_dict(obj.get("fromAddress")) if obj.get("fromAddress") is not None else None,
            "to_address": Address.from_dict(obj.get("toAddress")) if obj.get("toAddress") is not None else None,
            "basket_items": [CrossBorderQuotesRequestBasketItemsInner.from_dict(_item) for _item in obj.get("basketItems")] if obj.get("basketItems") is not None else None,
            "rates": [CrossBorderQuotesRequestRatesInner.from_dict(_item) for _item in obj.get("rates")] if obj.get("rates") is not None else None,
            "shipment_options": [CarrierFacilityResponseCarrierFacilityOptionsInner.from_dict(_item) for _item in obj.get("shipmentOptions")] if obj.get("shipmentOptions") is not None else None
        })
        return _obj


