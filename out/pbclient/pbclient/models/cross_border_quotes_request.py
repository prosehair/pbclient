# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.4
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from pbclient.models.address import Address
from pbclient.models.carrier_facility_response_carrier_facility_options_inner import CarrierFacilityResponseCarrierFacilityOptionsInner
from pbclient.models.cross_border_quotes_request_basket_items_inner import CrossBorderQuotesRequestBasketItemsInner
from pbclient.models.cross_border_quotes_request_rates_inner import CrossBorderQuotesRequestRatesInner
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CrossBorderQuotesRequest(BaseModel):
    """
    CrossBorderQuotesRequest
    """
    quote_currency: StrictStr = Field(description="The currency to return the quote in. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR", alias="quoteCurrency")
    basket_currency: StrictStr = Field(description="The default currency of the basket. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR", alias="basketCurrency")
    from_address: Optional[Address] = Field(default=None, alias="fromAddress")
    to_address: Address = Field(alias="toAddress")
    basket_items: List[CrossBorderQuotesRequestBasketItemsInner] = Field(description="The items in the buyer's shopping basket.", alias="basketItems")
    rates: List[CrossBorderQuotesRequestRatesInner] = Field(description="Specifies the carrier, service, parcel, and other information. In a response, this field also contains the service charges. Importatn- In a request, the rates array can contain only one rates object.")
    shipment_options: Optional[List[CarrierFacilityResponseCarrierFacilityOptionsInner]] = Field(default=None, alias="shipmentOptions")
    __properties: ClassVar[List[str]] = ["quoteCurrency", "basketCurrency", "fromAddress", "toAddress", "basketItems", "rates", "shipmentOptions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CrossBorderQuotesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of from_address
        if self.from_address:
            _dict['fromAddress'] = self.from_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_address
        if self.to_address:
            _dict['toAddress'] = self.to_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in basket_items (list)
        _items = []
        if self.basket_items:
            for _item in self.basket_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['basketItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rates (list)
        _items = []
        if self.rates:
            for _item in self.rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_options (list)
        _items = []
        if self.shipment_options:
            for _item in self.shipment_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipmentOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of CrossBorderQuotesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteCurrency": obj.get("quoteCurrency"),
            "basketCurrency": obj.get("basketCurrency"),
            "fromAddress": Address.from_dict(obj.get("fromAddress")) if obj.get("fromAddress") is not None else None,
            "toAddress": Address.from_dict(obj.get("toAddress")) if obj.get("toAddress") is not None else None,
            "basketItems": [CrossBorderQuotesRequestBasketItemsInner.from_dict(_item) for _item in obj.get("basketItems")] if obj.get("basketItems") is not None else None,
            "rates": [CrossBorderQuotesRequestRatesInner.from_dict(_item) for _item in obj.get("rates")] if obj.get("rates") is not None else None,
            "shipmentOptions": [CarrierFacilityResponseCarrierFacilityOptionsInner.from_dict(_item) for _item in obj.get("shipmentOptions")] if obj.get("shipmentOptions") is not None else None
        })
        return _obj


