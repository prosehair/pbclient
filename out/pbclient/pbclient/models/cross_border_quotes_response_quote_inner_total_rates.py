# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.5
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from pbclient.models.cross_border_quotes_response_quote_inner_quote_lines_inner_unit_rates_delivery_commitment import CrossBorderQuotesResponseQuoteInnerQuoteLinesInnerUnitRatesDeliveryCommitment
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CrossBorderQuotesResponseQuoteInnerTotalRates(BaseModel):
    """
    CrossBorderQuotesResponseQuoteInnerTotalRates
    """
    service_id: Optional[StrictStr] = Field(default=None, alias="serviceId")
    base_charge: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="baseCharge")
    delivery_commitment: Optional[CrossBorderQuotesResponseQuoteInnerQuoteLinesInnerUnitRatesDeliveryCommitment] = Field(default=None, alias="deliveryCommitment")
    total_carrier_charge: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalCarrierCharge")
    total_duty_amount: Optional[StrictInt] = Field(default=None, alias="totalDutyAmount")
    total_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalTaxAmount")
    __properties: ClassVar[List[str]] = ["serviceId", "baseCharge", "deliveryCommitment", "totalCarrierCharge", "totalDutyAmount", "totalTaxAmount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CrossBorderQuotesResponseQuoteInnerTotalRates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_commitment
        if self.delivery_commitment:
            _dict['deliveryCommitment'] = self.delivery_commitment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of CrossBorderQuotesResponseQuoteInnerTotalRates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serviceId": obj.get("serviceId"),
            "baseCharge": obj.get("baseCharge"),
            "deliveryCommitment": CrossBorderQuotesResponseQuoteInnerQuoteLinesInnerUnitRatesDeliveryCommitment.from_dict(obj.get("deliveryCommitment")) if obj.get("deliveryCommitment") is not None else None,
            "totalCarrierCharge": obj.get("totalCarrierCharge"),
            "totalDutyAmount": obj.get("totalDutyAmount"),
            "totalTaxAmount": obj.get("totalTaxAmount")
        })
        return _obj


