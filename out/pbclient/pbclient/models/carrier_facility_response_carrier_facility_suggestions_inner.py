# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.6
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pbclient.models.address import Address
from pbclient.models.carrier_facility_response_carrier_facility_options_inner import CarrierFacilityResponseCarrierFacilityOptionsInner
from pbclient.models.carrier_facility_response_carrier_facility_suggestions_inner_facility_hours_inner import CarrierFacilityResponseCarrierFacilitySuggestionsInnerFacilityHoursInner

class CarrierFacilityResponseCarrierFacilitySuggestionsInner(BaseModel):
    """
    CarrierFacilityResponseCarrierFacilitySuggestionsInner
    """
    address: Optional[Address] = None
    carrier_facility_attributes: Optional[conlist(CarrierFacilityResponseCarrierFacilityOptionsInner)] = Field(None, alias="carrierFacilityAttributes")
    facility_hours: Optional[conlist(CarrierFacilityResponseCarrierFacilitySuggestionsInnerFacilityHoursInner)] = Field(None, alias="facilityHours")
    facility_parking: Optional[StrictStr] = Field(None, alias="facilityParking")
    __properties = ["address", "carrierFacilityAttributes", "facilityHours", "facilityParking"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CarrierFacilityResponseCarrierFacilitySuggestionsInner:
        """Create an instance of CarrierFacilityResponseCarrierFacilitySuggestionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in carrier_facility_attributes (list)
        _items = []
        if self.carrier_facility_attributes:
            for _item in self.carrier_facility_attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['carrierFacilityAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facility_hours (list)
        _items = []
        if self.facility_hours:
            for _item in self.facility_hours:
                if _item:
                    _items.append(_item.to_dict())
            _dict['facilityHours'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CarrierFacilityResponseCarrierFacilitySuggestionsInner:
        """Create an instance of CarrierFacilityResponseCarrierFacilitySuggestionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CarrierFacilityResponseCarrierFacilitySuggestionsInner.parse_obj(obj)

        _obj = CarrierFacilityResponseCarrierFacilitySuggestionsInner.parse_obj({
            "address": Address.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "carrier_facility_attributes": [CarrierFacilityResponseCarrierFacilityOptionsInner.from_dict(_item) for _item in obj.get("carrierFacilityAttributes")] if obj.get("carrierFacilityAttributes") is not None else None,
            "facility_hours": [CarrierFacilityResponseCarrierFacilitySuggestionsInnerFacilityHoursInner.from_dict(_item) for _item in obj.get("facilityHours")] if obj.get("facilityHours") is not None else None,
            "facility_parking": obj.get("facilityParking")
        })
        return _obj


