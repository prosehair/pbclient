# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 2.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pbclient.models.battery_details import BatteryDetails
from pbclient.models.container_details import ContainerDetails
from pbclient.models.signatory import Signatory
from typing import Optional, Set
from typing_extensions import Self

class HazmatDetails(BaseModel):
    """
    HazmatDetails
    """ # noqa: E501
    battery_details: Optional[BatteryDetails] = Field(default=None, alias="batteryDetails")
    commodity_type: Optional[StrictStr] = Field(default=None, alias="commodityType")
    container_count: Optional[StrictInt] = Field(default=None, alias="containerCount")
    container_details: Optional[List[ContainerDetails]] = Field(default=None, alias="containerDetails")
    emergency_contact_number: Optional[StrictStr] = Field(default=None, alias="emergencyContactNumber")
    hazmat_document_type: Optional[StrictStr] = Field(default=None, alias="hazmatDocumentType")
    identical_containers: Optional[StrictBool] = Field(default=None, alias="identicalContainers")
    offeror: Optional[StrictStr] = None
    packaging_option: Optional[StrictStr] = Field(default=None, alias="packagingOption")
    signatory: Optional[Signatory] = None
    __properties: ClassVar[List[str]] = ["batteryDetails", "commodityType", "containerCount", "containerDetails", "emergencyContactNumber", "hazmatDocumentType", "identicalContainers", "offeror", "packagingOption", "signatory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HazmatDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of battery_details
        if self.battery_details:
            _dict['batteryDetails'] = self.battery_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in container_details (list)
        _items = []
        if self.container_details:
            for _item in self.container_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['containerDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of signatory
        if self.signatory:
            _dict['signatory'] = self.signatory.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HazmatDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batteryDetails": BatteryDetails.from_dict(obj["batteryDetails"]) if obj.get("batteryDetails") is not None else None,
            "commodityType": obj.get("commodityType"),
            "containerCount": obj.get("containerCount"),
            "containerDetails": [ContainerDetails.from_dict(_item) for _item in obj["containerDetails"]] if obj.get("containerDetails") is not None else None,
            "emergencyContactNumber": obj.get("emergencyContactNumber"),
            "hazmatDocumentType": obj.get("hazmatDocumentType"),
            "identicalContainers": obj.get("identicalContainers"),
            "offeror": obj.get("offeror"),
            "packagingOption": obj.get("packagingOption"),
            "signatory": Signatory.from_dict(obj["signatory"]) if obj.get("signatory") is not None else None
        })
        return _obj


