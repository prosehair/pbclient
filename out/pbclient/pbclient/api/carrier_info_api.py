# coding: utf-8

"""
    Shipping API

    Shipping API Sample.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, StrictStr

from typing import Any, Dict, List, Optional

from pbclient.models.carrier import Carrier
from pbclient.models.carrier_facility_request import CarrierFacilityRequest
from pbclient.models.carrier_facility_response import CarrierFacilityResponse
from pbclient.models.carrier_rule import CarrierRule
from pbclient.models.get_carrier_license_agreement200_response import GetCarrierLicenseAgreement200Response
from pbclient.models.iso_country_code import ISOCountryCode

from pbclient.api_client import ApiClient
from pbclient.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CarrierInfoApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_carrier_facilities(self, carrier_facility_request : CarrierFacilityRequest, x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs) -> CarrierFacilityResponse:  # noqa: E501
        """Find Carrier Facilities  # noqa: E501

        This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_carrier_facilities(carrier_facility_request, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param carrier_facility_request: (required)
        :type carrier_facility_request: CarrierFacilityRequest
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CarrierFacilityResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_carrier_facilities_with_http_info(carrier_facility_request, x_pb_unified_error_structure, **kwargs)  # noqa: E501

    @validate_arguments
    def get_carrier_facilities_with_http_info(self, carrier_facility_request : CarrierFacilityRequest, x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs):  # noqa: E501
        """Find Carrier Facilities  # noqa: E501

        This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_carrier_facilities_with_http_info(carrier_facility_request, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param carrier_facility_request: (required)
        :type carrier_facility_request: CarrierFacilityRequest
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CarrierFacilityResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'carrier_facility_request',
            'x_pb_unified_error_structure'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_carrier_facilities" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['carrier_facility_request']:
            _body_params = _params['carrier_facility_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "CarrierFacilityResponse",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/carrier-facility', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_carrier_license_agreement(self, carrier : Annotated[Carrier, Field(..., description="The carrier name. Currently this must be set to: UPS")], origin_country_code : Annotated[ISOCountryCode, Field(..., description="The two-character ISO country code for the country where the shipment originates.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs) -> GetCarrierLicenseAgreement200Response:  # noqa: E501
        """This operation retrieves a carrier's license agreement.  # noqa: E501

        This operation retrieves a carrier's license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_carrier_license_agreement(carrier, origin_country_code, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param carrier: The carrier name. Currently this must be set to: UPS (required)
        :type carrier: Carrier
        :param origin_country_code: The two-character ISO country code for the country where the shipment originates. (required)
        :type origin_country_code: ISOCountryCode
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetCarrierLicenseAgreement200Response
        """
        kwargs['_return_http_data_only'] = True
        return self.get_carrier_license_agreement_with_http_info(carrier, origin_country_code, x_pb_unified_error_structure, **kwargs)  # noqa: E501

    @validate_arguments
    def get_carrier_license_agreement_with_http_info(self, carrier : Annotated[Carrier, Field(..., description="The carrier name. Currently this must be set to: UPS")], origin_country_code : Annotated[ISOCountryCode, Field(..., description="The two-character ISO country code for the country where the shipment originates.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs):  # noqa: E501
        """This operation retrieves a carrier's license agreement.  # noqa: E501

        This operation retrieves a carrier's license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_carrier_license_agreement_with_http_info(carrier, origin_country_code, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param carrier: The carrier name. Currently this must be set to: UPS (required)
        :type carrier: Carrier
        :param origin_country_code: The two-character ISO country code for the country where the shipment originates. (required)
        :type origin_country_code: ISOCountryCode
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetCarrierLicenseAgreement200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'carrier',
            'origin_country_code',
            'x_pb_unified_error_structure'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_carrier_license_agreement" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('carrier') is not None:  # noqa: E501
            _query_params.append(('carrier', _params['carrier']))

        if _params.get('origin_country_code') is not None:  # noqa: E501
            _query_params.append(('originCountryCode', _params['origin_country_code']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "GetCarrierLicenseAgreement200Response",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/carrier/license-agreements', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_carrier_service_rules(self, carrier : Annotated[Carrier, Field(..., description="The carrier name. **Currently this must be set to: USPS** ")], origin_country_code : Annotated[ISOCountryCode, Field(..., description="The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.")], destination_country_code : Annotated[ISOCountryCode, Field(..., description="The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment's destination address.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, rate_type_id : Annotated[Optional[StrictStr], Field(description="The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned.")] = None, future_shipment_date : Annotated[Optional[StrictStr], Field(description="If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS**")] = None, return_shipment : Annotated[Optional[datetime], Field(description="If set to true, provides only services applicable for return shipment.")] = None, compact_response : Annotated[Optional[StrictBool], Field(description="If set to true, returns only summary, without special service details.")] = None, **kwargs) -> CarrierRule:  # noqa: E501
        """Retrieves the rules governing the carrier's services.  # noqa: E501

        This operation retrieves the rules governing the carrier's services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_carrier_service_rules(carrier, origin_country_code, destination_country_code, x_pb_unified_error_structure, rate_type_id, future_shipment_date, return_shipment, compact_response, async_req=True)
        >>> result = thread.get()

        :param carrier: The carrier name. **Currently this must be set to: USPS**  (required)
        :type carrier: Carrier
        :param origin_country_code: The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
        :type origin_country_code: ISOCountryCode
        :param destination_country_code: The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment's destination address. (required)
        :type destination_country_code: ISOCountryCode
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param rate_type_id: The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned.
        :type rate_type_id: str
        :param future_shipment_date: If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS**
        :type future_shipment_date: str
        :param return_shipment: If set to true, provides only services applicable for return shipment.
        :type return_shipment: datetime
        :param compact_response: If set to true, returns only summary, without special service details.
        :type compact_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CarrierRule
        """
        kwargs['_return_http_data_only'] = True
        return self.get_carrier_service_rules_with_http_info(carrier, origin_country_code, destination_country_code, x_pb_unified_error_structure, rate_type_id, future_shipment_date, return_shipment, compact_response, **kwargs)  # noqa: E501

    @validate_arguments
    def get_carrier_service_rules_with_http_info(self, carrier : Annotated[Carrier, Field(..., description="The carrier name. **Currently this must be set to: USPS** ")], origin_country_code : Annotated[ISOCountryCode, Field(..., description="The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.")], destination_country_code : Annotated[ISOCountryCode, Field(..., description="The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment's destination address.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, rate_type_id : Annotated[Optional[StrictStr], Field(description="The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned.")] = None, future_shipment_date : Annotated[Optional[StrictStr], Field(description="If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS**")] = None, return_shipment : Annotated[Optional[datetime], Field(description="If set to true, provides only services applicable for return shipment.")] = None, compact_response : Annotated[Optional[StrictBool], Field(description="If set to true, returns only summary, without special service details.")] = None, **kwargs):  # noqa: E501
        """Retrieves the rules governing the carrier's services.  # noqa: E501

        This operation retrieves the rules governing the carrier's services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_carrier_service_rules_with_http_info(carrier, origin_country_code, destination_country_code, x_pb_unified_error_structure, rate_type_id, future_shipment_date, return_shipment, compact_response, async_req=True)
        >>> result = thread.get()

        :param carrier: The carrier name. **Currently this must be set to: USPS**  (required)
        :type carrier: Carrier
        :param origin_country_code: The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
        :type origin_country_code: ISOCountryCode
        :param destination_country_code: The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment's destination address. (required)
        :type destination_country_code: ISOCountryCode
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param rate_type_id: The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned.
        :type rate_type_id: str
        :param future_shipment_date: If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS**
        :type future_shipment_date: str
        :param return_shipment: If set to true, provides only services applicable for return shipment.
        :type return_shipment: datetime
        :param compact_response: If set to true, returns only summary, without special service details.
        :type compact_response: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CarrierRule, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'carrier',
            'origin_country_code',
            'destination_country_code',
            'x_pb_unified_error_structure',
            'rate_type_id',
            'future_shipment_date',
            'return_shipment',
            'compact_response'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_carrier_service_rules" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('carrier') is not None:  # noqa: E501
            _query_params.append(('carrier', _params['carrier']))

        if _params.get('origin_country_code') is not None:  # noqa: E501
            _query_params.append(('originCountryCode', _params['origin_country_code']))

        if _params.get('destination_country_code') is not None:  # noqa: E501
            _query_params.append(('destinationCountryCode', _params['destination_country_code']))

        if _params.get('rate_type_id') is not None:  # noqa: E501
            _query_params.append(('rateTypeId', _params['rate_type_id']))

        if _params.get('future_shipment_date') is not None:  # noqa: E501
            _query_params.append(('futureShipmentDate', _params['future_shipment_date']))

        if _params.get('return_shipment') is not None:  # noqa: E501
            if isinstance(_params['return_shipment'], datetime):
                _query_params.append(('returnShipment', _params['return_shipment'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('returnShipment', _params['return_shipment']))

        if _params.get('compact_response') is not None:  # noqa: E501
            _query_params.append(('compactResponse', _params['compact_response']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "CarrierRule",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/information/rules/rating-services', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_carrier_supported_destination(self, carrier : Annotated[Carrier, Field(..., description="The carrier name. Currently this must be set to: USPS")], origin_country_code : Annotated[ISOCountryCode, Field(..., description="The two-character ISO country code for the country where the shipment originates.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs) -> List[object]:  # noqa: E501
        """This operation returns a list of supported destination countries to which the carrier offers international shipping services.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_carrier_supported_destination(carrier, origin_country_code, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param carrier: The carrier name. Currently this must be set to: USPS (required)
        :type carrier: Carrier
        :param origin_country_code: The two-character ISO country code for the country where the shipment originates. (required)
        :type origin_country_code: ISOCountryCode
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[object]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_carrier_supported_destination_with_http_info(carrier, origin_country_code, x_pb_unified_error_structure, **kwargs)  # noqa: E501

    @validate_arguments
    def get_carrier_supported_destination_with_http_info(self, carrier : Annotated[Carrier, Field(..., description="The carrier name. Currently this must be set to: USPS")], origin_country_code : Annotated[ISOCountryCode, Field(..., description="The two-character ISO country code for the country where the shipment originates.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs):  # noqa: E501
        """This operation returns a list of supported destination countries to which the carrier offers international shipping services.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_carrier_supported_destination_with_http_info(carrier, origin_country_code, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param carrier: The carrier name. Currently this must be set to: USPS (required)
        :type carrier: Carrier
        :param origin_country_code: The two-character ISO country code for the country where the shipment originates. (required)
        :type origin_country_code: ISOCountryCode
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[object], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'carrier',
            'origin_country_code',
            'x_pb_unified_error_structure'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_carrier_supported_destination" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('carrier') is not None:  # noqa: E501
            _query_params.append(('carrier', _params['carrier']))

        if _params.get('origin_country_code') is not None:  # noqa: E501
            _query_params.append(('originCountryCode', _params['origin_country_code']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "List[object]",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/countries', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
