# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.13
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Optional

from pbclient.models.page_real_transaction_detail_report import PageRealTransactionDetailReport

from pbclient.api_client import ApiClient
from pbclient.api_response import ApiResponse
from pbclient.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TransactionReportsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_transaction_report(self, developer_id : Annotated[StrictStr, Field(..., description="developerId")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, from_date : Annotated[Optional[datetime], Field(description="fromDate")] = None, ship_details : Optional[StrictInt] = None, page : Optional[StrictInt] = None, size : Optional[StrictInt] = None, print_status : Annotated[Optional[StrictStr], Field(description="printStatus")] = None, to_date : Annotated[Optional[datetime], Field(description="toDate")] = None, transaction_type : Annotated[Optional[StrictStr], Field(description="transactionType")] = None, merchant_id : Annotated[Optional[StrictStr], Field(description="The value of the postalReportingNumber element in the [merchant object](https://shipping.pitneybowes.com/reference/resource-objects.html). This value is also the merchant's Shipper ID.")] = None, sort : Annotated[Optional[StrictStr], Field(description="Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). Use the following form-  * **sort=<property_name>,<sort_direction>** For example- **sort=transactionId,desc** ")] = None, parcel_tracking_number : Annotated[Optional[StrictStr], Field(description="Parcel tracking number of the shipment.")] = None, transaction_id : Annotated[Optional[StrictStr], Field(description="The unique string that identifies all the transactions associated with a given shipment. The string comprises the developer ID and the shipment's X-PB-TransactionId, separated by an underscore (_). For example-  * **transactionId=44397664_ad5aa07-ad7414-a78a-c22b3**")] = None, **kwargs) -> PageRealTransactionDetailReport:  # noqa: E501
        """This operation retrieves all transactions for a specified period of time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_report(developer_id, x_pb_unified_error_structure, from_date, ship_details, page, size, print_status, to_date, transaction_type, merchant_id, sort, parcel_tracking_number, transaction_id, async_req=True)
        >>> result = thread.get()

        :param developer_id: developerId (required)
        :type developer_id: str
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param from_date: fromDate
        :type from_date: datetime
        :param ship_details:
        :type ship_details: int
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param print_status: printStatus
        :type print_status: str
        :param to_date: toDate
        :type to_date: datetime
        :param transaction_type: transactionType
        :type transaction_type: str
        :param merchant_id: The value of the postalReportingNumber element in the [merchant object](https://shipping.pitneybowes.com/reference/resource-objects.html). This value is also the merchant's Shipper ID.
        :type merchant_id: str
        :param sort: Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). Use the following form-  * **sort=<property_name>,<sort_direction>** For example- **sort=transactionId,desc** 
        :type sort: str
        :param parcel_tracking_number: Parcel tracking number of the shipment.
        :type parcel_tracking_number: str
        :param transaction_id: The unique string that identifies all the transactions associated with a given shipment. The string comprises the developer ID and the shipment's X-PB-TransactionId, separated by an underscore (_). For example-  * **transactionId=44397664_ad5aa07-ad7414-a78a-c22b3**
        :type transaction_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PageRealTransactionDetailReport
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_transaction_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_transaction_report_with_http_info(developer_id, x_pb_unified_error_structure, from_date, ship_details, page, size, print_status, to_date, transaction_type, merchant_id, sort, parcel_tracking_number, transaction_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_transaction_report_with_http_info(self, developer_id : Annotated[StrictStr, Field(..., description="developerId")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, from_date : Annotated[Optional[datetime], Field(description="fromDate")] = None, ship_details : Optional[StrictInt] = None, page : Optional[StrictInt] = None, size : Optional[StrictInt] = None, print_status : Annotated[Optional[StrictStr], Field(description="printStatus")] = None, to_date : Annotated[Optional[datetime], Field(description="toDate")] = None, transaction_type : Annotated[Optional[StrictStr], Field(description="transactionType")] = None, merchant_id : Annotated[Optional[StrictStr], Field(description="The value of the postalReportingNumber element in the [merchant object](https://shipping.pitneybowes.com/reference/resource-objects.html). This value is also the merchant's Shipper ID.")] = None, sort : Annotated[Optional[StrictStr], Field(description="Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). Use the following form-  * **sort=<property_name>,<sort_direction>** For example- **sort=transactionId,desc** ")] = None, parcel_tracking_number : Annotated[Optional[StrictStr], Field(description="Parcel tracking number of the shipment.")] = None, transaction_id : Annotated[Optional[StrictStr], Field(description="The unique string that identifies all the transactions associated with a given shipment. The string comprises the developer ID and the shipment's X-PB-TransactionId, separated by an underscore (_). For example-  * **transactionId=44397664_ad5aa07-ad7414-a78a-c22b3**")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """This operation retrieves all transactions for a specified period of time.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_report_with_http_info(developer_id, x_pb_unified_error_structure, from_date, ship_details, page, size, print_status, to_date, transaction_type, merchant_id, sort, parcel_tracking_number, transaction_id, async_req=True)
        >>> result = thread.get()

        :param developer_id: developerId (required)
        :type developer_id: str
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param from_date: fromDate
        :type from_date: datetime
        :param ship_details:
        :type ship_details: int
        :param page:
        :type page: int
        :param size:
        :type size: int
        :param print_status: printStatus
        :type print_status: str
        :param to_date: toDate
        :type to_date: datetime
        :param transaction_type: transactionType
        :type transaction_type: str
        :param merchant_id: The value of the postalReportingNumber element in the [merchant object](https://shipping.pitneybowes.com/reference/resource-objects.html). This value is also the merchant's Shipper ID.
        :type merchant_id: str
        :param sort: Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). Use the following form-  * **sort=<property_name>,<sort_direction>** For example- **sort=transactionId,desc** 
        :type sort: str
        :param parcel_tracking_number: Parcel tracking number of the shipment.
        :type parcel_tracking_number: str
        :param transaction_id: The unique string that identifies all the transactions associated with a given shipment. The string comprises the developer ID and the shipment's X-PB-TransactionId, separated by an underscore (_). For example-  * **transactionId=44397664_ad5aa07-ad7414-a78a-c22b3**
        :type transaction_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PageRealTransactionDetailReport, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'developer_id',
            'x_pb_unified_error_structure',
            'from_date',
            'ship_details',
            'page',
            'size',
            'print_status',
            'to_date',
            'transaction_type',
            'merchant_id',
            'sort',
            'parcel_tracking_number',
            'transaction_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['developer_id']:
            _path_params['developerId'] = _params['developer_id']


        # process the query parameters
        _query_params = []
        if _params.get('from_date') is not None:  # noqa: E501
            if isinstance(_params['from_date'], datetime):
                _query_params.append(('fromDate', _params['from_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('fromDate', _params['from_date']))

        if _params.get('ship_details') is not None:  # noqa: E501
            _query_params.append(('shipDetails', _params['ship_details']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('print_status') is not None:  # noqa: E501
            _query_params.append(('printStatus', _params['print_status']))

        if _params.get('to_date') is not None:  # noqa: E501
            if isinstance(_params['to_date'], datetime):
                _query_params.append(('toDate', _params['to_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('toDate', _params['to_date']))

        if _params.get('transaction_type') is not None:  # noqa: E501
            _query_params.append(('transactionType', _params['transaction_type']))

        if _params.get('merchant_id') is not None:  # noqa: E501
            _query_params.append(('merchantId', _params['merchant_id']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        if _params.get('parcel_tracking_number') is not None:  # noqa: E501
            _query_params.append(('parcelTrackingNumber', _params['parcel_tracking_number']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        if _params['transaction_id']:
            _header_params['transactionId'] = _params['transaction_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "PageRealTransactionDetailReport",
        }

        return self.api_client.call_api(
            '/v4/ledger/developers/{developerId}/transactions/reports', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
