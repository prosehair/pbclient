# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.11
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr

from typing import Optional

from pbclient.models.cancel_shipment import CancelShipment
from pbclient.models.carrier import Carrier
from pbclient.models.shipment import Shipment

from pbclient.api_client import ApiClient
from pbclient.api_response import ApiResponse
from pbclient.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ShipmentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def cancel_shipment(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], shipment_id : Annotated[StrictStr, Field(..., description="shipmentId")], x_pb_unified_error_structure : Annotated[Optional[StrictStr], Field(description="Recommended. Set this to true to use the standard error object if an error occurs.")] = None, x_pb_shipper_carrier_account_id : Annotated[Optional[StrictStr], Field(description="UPS Only. The unique identifier returned in the shipperCarrierAccountId field by the [Register an Existing Carrier Account API.(https://shipping.pitneybowes.com/api/post-carrier-accounts-register.html)")] = None, cancel_initiator : Annotated[Optional[StrictStr], Field(description="Indicates that this refund request is initiated by the shipper. Set this to: SHIPPER")] = None, carrier : Annotated[Optional[Carrier], Field(description="Conditional. The carrier. This is required if the carrier is not USPS")] = None, **kwargs) -> CancelShipment:  # noqa: E501
        """cancelShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_shipment(x_pb_transaction_id, shipment_id, x_pb_unified_error_structure, x_pb_shipper_carrier_account_id, cancel_initiator, carrier, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param shipment_id: shipmentId (required)
        :type shipment_id: str
        :param x_pb_unified_error_structure: Recommended. Set this to true to use the standard error object if an error occurs.
        :type x_pb_unified_error_structure: str
        :param x_pb_shipper_carrier_account_id: UPS Only. The unique identifier returned in the shipperCarrierAccountId field by the [Register an Existing Carrier Account API.(https://shipping.pitneybowes.com/api/post-carrier-accounts-register.html)
        :type x_pb_shipper_carrier_account_id: str
        :param cancel_initiator: Indicates that this refund request is initiated by the shipper. Set this to: SHIPPER
        :type cancel_initiator: str
        :param carrier: Conditional. The carrier. This is required if the carrier is not USPS
        :type carrier: Carrier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CancelShipment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cancel_shipment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cancel_shipment_with_http_info(x_pb_transaction_id, shipment_id, x_pb_unified_error_structure, x_pb_shipper_carrier_account_id, cancel_initiator, carrier, **kwargs)  # noqa: E501

    @validate_arguments
    def cancel_shipment_with_http_info(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], shipment_id : Annotated[StrictStr, Field(..., description="shipmentId")], x_pb_unified_error_structure : Annotated[Optional[StrictStr], Field(description="Recommended. Set this to true to use the standard error object if an error occurs.")] = None, x_pb_shipper_carrier_account_id : Annotated[Optional[StrictStr], Field(description="UPS Only. The unique identifier returned in the shipperCarrierAccountId field by the [Register an Existing Carrier Account API.(https://shipping.pitneybowes.com/api/post-carrier-accounts-register.html)")] = None, cancel_initiator : Annotated[Optional[StrictStr], Field(description="Indicates that this refund request is initiated by the shipper. Set this to: SHIPPER")] = None, carrier : Annotated[Optional[Carrier], Field(description="Conditional. The carrier. This is required if the carrier is not USPS")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """cancelShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_shipment_with_http_info(x_pb_transaction_id, shipment_id, x_pb_unified_error_structure, x_pb_shipper_carrier_account_id, cancel_initiator, carrier, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param shipment_id: shipmentId (required)
        :type shipment_id: str
        :param x_pb_unified_error_structure: Recommended. Set this to true to use the standard error object if an error occurs.
        :type x_pb_unified_error_structure: str
        :param x_pb_shipper_carrier_account_id: UPS Only. The unique identifier returned in the shipperCarrierAccountId field by the [Register an Existing Carrier Account API.(https://shipping.pitneybowes.com/api/post-carrier-accounts-register.html)
        :type x_pb_shipper_carrier_account_id: str
        :param cancel_initiator: Indicates that this refund request is initiated by the shipper. Set this to: SHIPPER
        :type cancel_initiator: str
        :param carrier: Conditional. The carrier. This is required if the carrier is not USPS
        :type carrier: Carrier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CancelShipment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_pb_transaction_id',
            'shipment_id',
            'x_pb_unified_error_structure',
            'x_pb_shipper_carrier_account_id',
            'cancel_initiator',
            'carrier'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_shipment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['shipment_id']:
            _path_params['shipmentId'] = _params['shipment_id']


        # process the query parameters
        _query_params = []
        if _params.get('cancel_initiator') is not None:  # noqa: E501
            _query_params.append(('cancelInitiator', _params['cancel_initiator']))

        if _params.get('carrier') is not None:  # noqa: E501
            _query_params.append(('carrier', _params['carrier'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_transaction_id']:
            _header_params['X-PB-TransactionId'] = _params['x_pb_transaction_id']

        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        if _params['x_pb_shipper_carrier_account_id']:
            _header_params['X-PB-Shipper-Carrier-AccountId'] = _params['x_pb_shipper_carrier_account_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "CancelShipment",
            '201': None,
        }

        return self.api_client.call_api(
            '/shippingservices/v1/shipments/{shipmentId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_shipment_label(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], shipment : Annotated[Shipment, Field(..., description="request")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, x_pb_integrator_carrier_id : Annotated[Optional[StrictStr], Field(description="USPS Only. Negotiated services rate, if applicable.")] = None, x_pb_shipper_rate_plan : Annotated[Optional[StrictStr], Field(description="USPS Only. Shipper rate plan, if applicable. For more information, see [this FAQ](https://shipping.pitneybowes.com/faqs/rates.html#rate-plans-faq).")] = None, x_pb_shipment_group_id : Annotated[Optional[StrictStr], Field(description=" **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**.The job number that represents the agreement between the merchant and PB Presort. This was provided by Pitney Bowes during [merchant onboarding for PB Presort](https://shipping.pitneybowes.com/carriers/pb-presort.html).")] = None, x_pb_shipper_carrier_account_id : Annotated[Optional[StrictStr], Field(description="**[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**. The merchant's Mailer ID (MID), as provided by Pitney Bowes during merchant onboarding for PB Presort.")] = None, include_delivery_commitment : Annotated[Optional[StrictStr], Field(description="If set to true, returns estimated transit times in days. Only for USPS Create Shipment. See also [Pitney Bowes Delivery Guarantee](https://shipping.pitneybowes.com/faqs/delivery-guarantee.html) [Do all USPS services return transit times?](https://shipping.pitneybowes.com/faqs/shipments.html#transit-times-faq)")] = None, carrier : Annotated[Optional[StrictStr], Field(description="Cross-Border only. Required for PB Cross-Border. Set this to PBI.")] = None, **kwargs) -> Shipment:  # noqa: E501
        """This operation creates a shipment and purchases a shipment label.  # noqa: E501

        The API returns the label as either a Base64 string or a link to a PDF. For more information visit [Create Shipment Documents](https://shipping.pitneybowes.com/api/post-shipments.html). Following are samples of different carriers -  * [Create a USPS (U.S. Postal Service) Label](https://shipping.pitneybowes.com/api/post-shipments-usps.html)  * [Create a USPS PMOD Label](https://shipping.pitneybowes.com/api/post-shipments-pmod.html) * [Create a USPS Scan-Based Return Label](https://shipping.pitneybowes.com/api/post-shipments-returns.html) * [Create a Pure Post Return Label](https://shipping.pitneybowes.com/api/post-shipments-pure-post-return.html) * [Create a Newgistics Label](https://shipping.pitneybowes.com/api/post-shipments-newgistics.html) * [Create a PB Presort Label](https://shipping.pitneybowes.com/api/post-shipments-presort.html) * [Create a PB Cross-Border Shipment](https://shipping.pitneybowes.com/api/post-shipments-cbds.html) * [Create a UPS (United Parcel Service) Label](https://shipping.pitneybowes.com/api/post-shipments-ups.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shipment_label(x_pb_transaction_id, shipment, x_pb_unified_error_structure, x_pb_integrator_carrier_id, x_pb_shipper_rate_plan, x_pb_shipment_group_id, x_pb_shipper_carrier_account_id, include_delivery_commitment, carrier, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param shipment: request (required)
        :type shipment: Shipment
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param x_pb_integrator_carrier_id: USPS Only. Negotiated services rate, if applicable.
        :type x_pb_integrator_carrier_id: str
        :param x_pb_shipper_rate_plan: USPS Only. Shipper rate plan, if applicable. For more information, see [this FAQ](https://shipping.pitneybowes.com/faqs/rates.html#rate-plans-faq).
        :type x_pb_shipper_rate_plan: str
        :param x_pb_shipment_group_id:  **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**.The job number that represents the agreement between the merchant and PB Presort. This was provided by Pitney Bowes during [merchant onboarding for PB Presort](https://shipping.pitneybowes.com/carriers/pb-presort.html).
        :type x_pb_shipment_group_id: str
        :param x_pb_shipper_carrier_account_id: **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**. The merchant's Mailer ID (MID), as provided by Pitney Bowes during merchant onboarding for PB Presort.
        :type x_pb_shipper_carrier_account_id: str
        :param include_delivery_commitment: If set to true, returns estimated transit times in days. Only for USPS Create Shipment. See also [Pitney Bowes Delivery Guarantee](https://shipping.pitneybowes.com/faqs/delivery-guarantee.html) [Do all USPS services return transit times?](https://shipping.pitneybowes.com/faqs/shipments.html#transit-times-faq)
        :type include_delivery_commitment: str
        :param carrier: Cross-Border only. Required for PB Cross-Border. Set this to PBI.
        :type carrier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Shipment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_shipment_label_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_shipment_label_with_http_info(x_pb_transaction_id, shipment, x_pb_unified_error_structure, x_pb_integrator_carrier_id, x_pb_shipper_rate_plan, x_pb_shipment_group_id, x_pb_shipper_carrier_account_id, include_delivery_commitment, carrier, **kwargs)  # noqa: E501

    @validate_arguments
    def create_shipment_label_with_http_info(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], shipment : Annotated[Shipment, Field(..., description="request")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, x_pb_integrator_carrier_id : Annotated[Optional[StrictStr], Field(description="USPS Only. Negotiated services rate, if applicable.")] = None, x_pb_shipper_rate_plan : Annotated[Optional[StrictStr], Field(description="USPS Only. Shipper rate plan, if applicable. For more information, see [this FAQ](https://shipping.pitneybowes.com/faqs/rates.html#rate-plans-faq).")] = None, x_pb_shipment_group_id : Annotated[Optional[StrictStr], Field(description=" **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**.The job number that represents the agreement between the merchant and PB Presort. This was provided by Pitney Bowes during [merchant onboarding for PB Presort](https://shipping.pitneybowes.com/carriers/pb-presort.html).")] = None, x_pb_shipper_carrier_account_id : Annotated[Optional[StrictStr], Field(description="**[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**. The merchant's Mailer ID (MID), as provided by Pitney Bowes during merchant onboarding for PB Presort.")] = None, include_delivery_commitment : Annotated[Optional[StrictStr], Field(description="If set to true, returns estimated transit times in days. Only for USPS Create Shipment. See also [Pitney Bowes Delivery Guarantee](https://shipping.pitneybowes.com/faqs/delivery-guarantee.html) [Do all USPS services return transit times?](https://shipping.pitneybowes.com/faqs/shipments.html#transit-times-faq)")] = None, carrier : Annotated[Optional[StrictStr], Field(description="Cross-Border only. Required for PB Cross-Border. Set this to PBI.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """This operation creates a shipment and purchases a shipment label.  # noqa: E501

        The API returns the label as either a Base64 string or a link to a PDF. For more information visit [Create Shipment Documents](https://shipping.pitneybowes.com/api/post-shipments.html). Following are samples of different carriers -  * [Create a USPS (U.S. Postal Service) Label](https://shipping.pitneybowes.com/api/post-shipments-usps.html)  * [Create a USPS PMOD Label](https://shipping.pitneybowes.com/api/post-shipments-pmod.html) * [Create a USPS Scan-Based Return Label](https://shipping.pitneybowes.com/api/post-shipments-returns.html) * [Create a Pure Post Return Label](https://shipping.pitneybowes.com/api/post-shipments-pure-post-return.html) * [Create a Newgistics Label](https://shipping.pitneybowes.com/api/post-shipments-newgistics.html) * [Create a PB Presort Label](https://shipping.pitneybowes.com/api/post-shipments-presort.html) * [Create a PB Cross-Border Shipment](https://shipping.pitneybowes.com/api/post-shipments-cbds.html) * [Create a UPS (United Parcel Service) Label](https://shipping.pitneybowes.com/api/post-shipments-ups.html)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shipment_label_with_http_info(x_pb_transaction_id, shipment, x_pb_unified_error_structure, x_pb_integrator_carrier_id, x_pb_shipper_rate_plan, x_pb_shipment_group_id, x_pb_shipper_carrier_account_id, include_delivery_commitment, carrier, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param shipment: request (required)
        :type shipment: Shipment
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param x_pb_integrator_carrier_id: USPS Only. Negotiated services rate, if applicable.
        :type x_pb_integrator_carrier_id: str
        :param x_pb_shipper_rate_plan: USPS Only. Shipper rate plan, if applicable. For more information, see [this FAQ](https://shipping.pitneybowes.com/faqs/rates.html#rate-plans-faq).
        :type x_pb_shipper_rate_plan: str
        :param x_pb_shipment_group_id:  **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**.The job number that represents the agreement between the merchant and PB Presort. This was provided by Pitney Bowes during [merchant onboarding for PB Presort](https://shipping.pitneybowes.com/carriers/pb-presort.html).
        :type x_pb_shipment_group_id: str
        :param x_pb_shipper_carrier_account_id: **[Required parameter for PBPresort service](https://shipping.pitneybowes.com/api/post-shipments-presort.html)**. The merchant's Mailer ID (MID), as provided by Pitney Bowes during merchant onboarding for PB Presort.
        :type x_pb_shipper_carrier_account_id: str
        :param include_delivery_commitment: If set to true, returns estimated transit times in days. Only for USPS Create Shipment. See also [Pitney Bowes Delivery Guarantee](https://shipping.pitneybowes.com/faqs/delivery-guarantee.html) [Do all USPS services return transit times?](https://shipping.pitneybowes.com/faqs/shipments.html#transit-times-faq)
        :type include_delivery_commitment: str
        :param carrier: Cross-Border only. Required for PB Cross-Border. Set this to PBI.
        :type carrier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Shipment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_pb_transaction_id',
            'shipment',
            'x_pb_unified_error_structure',
            'x_pb_integrator_carrier_id',
            'x_pb_shipper_rate_plan',
            'x_pb_shipment_group_id',
            'x_pb_shipper_carrier_account_id',
            'include_delivery_commitment',
            'carrier'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_shipment_label" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('include_delivery_commitment') is not None:  # noqa: E501
            _query_params.append(('includeDeliveryCommitment', _params['include_delivery_commitment']))

        if _params.get('carrier') is not None:  # noqa: E501
            _query_params.append(('carrier', _params['carrier']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        if _params['x_pb_transaction_id']:
            _header_params['X-PB-TransactionId'] = _params['x_pb_transaction_id']

        if _params['x_pb_integrator_carrier_id']:
            _header_params['X-PB-Integrator-CarrierId'] = _params['x_pb_integrator_carrier_id']

        if _params['x_pb_shipper_rate_plan']:
            _header_params['X-PB-Shipper-Rate-Plan'] = _params['x_pb_shipper_rate_plan']

        if _params['x_pb_shipment_group_id']:
            _header_params['X-PB-ShipmentGroupId'] = _params['x_pb_shipment_group_id']

        if _params['x_pb_shipper_carrier_account_id']:
            _header_params['X-PB-Shipper-Carrier-AccountId'] = _params['x_pb_shipper_carrier_account_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['shipment'] is not None:
            _body_params = _params['shipment']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "Shipment",
            '201': "Shipment",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/shipments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def reprint_shipment(self, shipment_id : Annotated[StrictStr, Field(..., description="Required. The shipment ID that was issued when shipment label was generated.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, carrier : Annotated[Optional[Carrier], Field(description="Conditional. The carrier. This is required if the carrier is not USPS")] = None, **kwargs) -> Shipment:  # noqa: E501
        """reprintShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reprint_shipment(shipment_id, x_pb_unified_error_structure, carrier, async_req=True)
        >>> result = thread.get()

        :param shipment_id: Required. The shipment ID that was issued when shipment label was generated. (required)
        :type shipment_id: str
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param carrier: Conditional. The carrier. This is required if the carrier is not USPS
        :type carrier: Carrier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Shipment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the reprint_shipment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.reprint_shipment_with_http_info(shipment_id, x_pb_unified_error_structure, carrier, **kwargs)  # noqa: E501

    @validate_arguments
    def reprint_shipment_with_http_info(self, shipment_id : Annotated[StrictStr, Field(..., description="Required. The shipment ID that was issued when shipment label was generated.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, carrier : Annotated[Optional[Carrier], Field(description="Conditional. The carrier. This is required if the carrier is not USPS")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """reprintShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reprint_shipment_with_http_info(shipment_id, x_pb_unified_error_structure, carrier, async_req=True)
        >>> result = thread.get()

        :param shipment_id: Required. The shipment ID that was issued when shipment label was generated. (required)
        :type shipment_id: str
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param carrier: Conditional. The carrier. This is required if the carrier is not USPS
        :type carrier: Carrier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Shipment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'shipment_id',
            'x_pb_unified_error_structure',
            'carrier'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reprint_shipment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['shipment_id']:
            _path_params['shipmentId'] = _params['shipment_id']


        # process the query parameters
        _query_params = []
        if _params.get('carrier') is not None:  # noqa: E501
            _query_params.append(('carrier', _params['carrier'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "Shipment",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/shipments/{shipmentId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def retry_shipment(self, original_transaction_id : StrictStr, x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, carrier : Annotated[Optional[Carrier], Field(description="Conditional. The carrier. This is required if the carrier is not USPS")] = None, **kwargs) -> Shipment:  # noqa: E501
        """retryShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retry_shipment(original_transaction_id, x_pb_unified_error_structure, carrier, async_req=True)
        >>> result = thread.get()

        :param original_transaction_id: (required)
        :type original_transaction_id: str
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param carrier: Conditional. The carrier. This is required if the carrier is not USPS
        :type carrier: Carrier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Shipment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the retry_shipment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.retry_shipment_with_http_info(original_transaction_id, x_pb_unified_error_structure, carrier, **kwargs)  # noqa: E501

    @validate_arguments
    def retry_shipment_with_http_info(self, original_transaction_id : StrictStr, x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, carrier : Annotated[Optional[Carrier], Field(description="Conditional. The carrier. This is required if the carrier is not USPS")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """retryShipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retry_shipment_with_http_info(original_transaction_id, x_pb_unified_error_structure, carrier, async_req=True)
        >>> result = thread.get()

        :param original_transaction_id: (required)
        :type original_transaction_id: str
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param carrier: Conditional. The carrier. This is required if the carrier is not USPS
        :type carrier: Carrier
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Shipment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'original_transaction_id',
            'x_pb_unified_error_structure',
            'carrier'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_shipment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('original_transaction_id') is not None:  # noqa: E501
            _query_params.append(('originalTransactionId', _params['original_transaction_id']))

        if _params.get('carrier') is not None:  # noqa: E501
            _query_params.append(('carrier', _params['carrier'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "Shipment",
            '201': None,
        }

        return self.api_client.call_api(
            '/shippingservices/v1/shipments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
