# coding: utf-8

"""
    Shipping API

    Shipping API Sample.

    The version of the OpenAPI document: 1.0.7
    Contact: support@pb.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr

from typing import Optional

from pbclient.models.parcel_protection_create_request import ParcelProtectionCreateRequest
from pbclient.models.parcel_protection_create_response import ParcelProtectionCreateResponse
from pbclient.models.parcel_protection_policy_response import ParcelProtectionPolicyResponse
from pbclient.models.parcel_protection_quote_request import ParcelProtectionQuoteRequest
from pbclient.models.parcel_protection_quote_response import ParcelProtectionQuoteResponse
from pbclient.models.void_parcel_protection_request import VoidParcelProtectionRequest
from pbclient.models.void_parcel_protection_response import VoidParcelProtectionResponse

from pbclient.api_client import ApiClient
from pbclient.api_response import ApiResponse
from pbclient.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ParcelProtectionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def cancel_parcel_protection(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], parcel_protection_reference_id : Annotated[StrictStr, Field(..., description="Required. The identifier for the PB Parcel Protection policy that is being voided.")], void_parcel_protection_request : Annotated[VoidParcelProtectionRequest, Field(..., description="manifest")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs) -> VoidParcelProtectionResponse:  # noqa: E501
        """Parcel Protection Coverage  # noqa: E501

        This API lets merchants request Pitney Bowes [Parcel Protection](https://shipping.pitneybowes.com/faqs/parcel-protection.html) coverage for shipments. Merchants can request coverage for shipments created with the Shipping APIs as well as for shipments created with other platforms.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_parcel_protection(x_pb_transaction_id, parcel_protection_reference_id, void_parcel_protection_request, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param parcel_protection_reference_id: Required. The identifier for the PB Parcel Protection policy that is being voided. (required)
        :type parcel_protection_reference_id: str
        :param void_parcel_protection_request: manifest (required)
        :type void_parcel_protection_request: VoidParcelProtectionRequest
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VoidParcelProtectionResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the cancel_parcel_protection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.cancel_parcel_protection_with_http_info(x_pb_transaction_id, parcel_protection_reference_id, void_parcel_protection_request, x_pb_unified_error_structure, **kwargs)  # noqa: E501

    @validate_arguments
    def cancel_parcel_protection_with_http_info(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], parcel_protection_reference_id : Annotated[StrictStr, Field(..., description="Required. The identifier for the PB Parcel Protection policy that is being voided.")], void_parcel_protection_request : Annotated[VoidParcelProtectionRequest, Field(..., description="manifest")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Parcel Protection Coverage  # noqa: E501

        This API lets merchants request Pitney Bowes [Parcel Protection](https://shipping.pitneybowes.com/faqs/parcel-protection.html) coverage for shipments. Merchants can request coverage for shipments created with the Shipping APIs as well as for shipments created with other platforms.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_parcel_protection_with_http_info(x_pb_transaction_id, parcel_protection_reference_id, void_parcel_protection_request, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param parcel_protection_reference_id: Required. The identifier for the PB Parcel Protection policy that is being voided. (required)
        :type parcel_protection_reference_id: str
        :param void_parcel_protection_request: manifest (required)
        :type void_parcel_protection_request: VoidParcelProtectionRequest
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VoidParcelProtectionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_pb_transaction_id',
            'parcel_protection_reference_id',
            'void_parcel_protection_request',
            'x_pb_unified_error_structure'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_parcel_protection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('parcel_protection_reference_id') is not None:  # noqa: E501
            _query_params.append(('parcelProtectionReferenceId', _params['parcel_protection_reference_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        if _params['x_pb_transaction_id']:
            _header_params['X-PB-TransactionId'] = _params['x_pb_transaction_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['void_parcel_protection_request'] is not None:
            _body_params = _params['void_parcel_protection_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "VoidParcelProtectionResponse",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/parcel-protection/void', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_parcel_protection_coverage(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], parcel_protection_create_request : Annotated[ParcelProtectionCreateRequest, Field(..., description="manifest")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs) -> ParcelProtectionCreateResponse:  # noqa: E501
        """Parcel Protection Coverage  # noqa: E501

        This API lets merchants request Pitney Bowes [Parcel Protection](https://shipping.pitneybowes.com/faqs/parcel-protection.html) coverage for shipments. Merchants can request coverage for shipments created with the Shipping APIs as well as for shipments created with other platforms.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parcel_protection_coverage(x_pb_transaction_id, parcel_protection_create_request, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param parcel_protection_create_request: manifest (required)
        :type parcel_protection_create_request: ParcelProtectionCreateRequest
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ParcelProtectionCreateResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_parcel_protection_coverage_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_parcel_protection_coverage_with_http_info(x_pb_transaction_id, parcel_protection_create_request, x_pb_unified_error_structure, **kwargs)  # noqa: E501

    @validate_arguments
    def get_parcel_protection_coverage_with_http_info(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], parcel_protection_create_request : Annotated[ParcelProtectionCreateRequest, Field(..., description="manifest")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Parcel Protection Coverage  # noqa: E501

        This API lets merchants request Pitney Bowes [Parcel Protection](https://shipping.pitneybowes.com/faqs/parcel-protection.html) coverage for shipments. Merchants can request coverage for shipments created with the Shipping APIs as well as for shipments created with other platforms.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parcel_protection_coverage_with_http_info(x_pb_transaction_id, parcel_protection_create_request, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param parcel_protection_create_request: manifest (required)
        :type parcel_protection_create_request: ParcelProtectionCreateRequest
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ParcelProtectionCreateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_pb_transaction_id',
            'parcel_protection_create_request',
            'x_pb_unified_error_structure'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parcel_protection_coverage" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        if _params['x_pb_transaction_id']:
            _header_params['X-PB-TransactionId'] = _params['x_pb_transaction_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['parcel_protection_create_request'] is not None:
            _body_params = _params['parcel_protection_create_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "ParcelProtectionCreateResponse",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/parcel-protection/create', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_parcel_protection_quote(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], parcel_protection_quote_request : Annotated[ParcelProtectionQuoteRequest, Field(..., description="manifest")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs) -> ParcelProtectionQuoteResponse:  # noqa: E501
        """Parcel Protection Quote  # noqa: E501

        This API provides a quote for covering a shipment through Pitney Bowes [Parcel Protection](https://www.pitneybowes.com/us/ecommerce-delivery-services/parcel-protection.html).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parcel_protection_quote(x_pb_transaction_id, parcel_protection_quote_request, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param parcel_protection_quote_request: manifest (required)
        :type parcel_protection_quote_request: ParcelProtectionQuoteRequest
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ParcelProtectionQuoteResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_parcel_protection_quote_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_parcel_protection_quote_with_http_info(x_pb_transaction_id, parcel_protection_quote_request, x_pb_unified_error_structure, **kwargs)  # noqa: E501

    @validate_arguments
    def get_parcel_protection_quote_with_http_info(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], parcel_protection_quote_request : Annotated[ParcelProtectionQuoteRequest, Field(..., description="manifest")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Parcel Protection Quote  # noqa: E501

        This API provides a quote for covering a shipment through Pitney Bowes [Parcel Protection](https://www.pitneybowes.com/us/ecommerce-delivery-services/parcel-protection.html).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parcel_protection_quote_with_http_info(x_pb_transaction_id, parcel_protection_quote_request, x_pb_unified_error_structure, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param parcel_protection_quote_request: manifest (required)
        :type parcel_protection_quote_request: ParcelProtectionQuoteRequest
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ParcelProtectionQuoteResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_pb_transaction_id',
            'parcel_protection_quote_request',
            'x_pb_unified_error_structure'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parcel_protection_quote" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        if _params['x_pb_transaction_id']:
            _header_params['X-PB-TransactionId'] = _params['x_pb_transaction_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['parcel_protection_quote_request'] is not None:
            _body_params = _params['parcel_protection_quote_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "ParcelProtectionQuoteResponse",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/parcel-protection/quote', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_parcel_protection_reports(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], developer_id : Annotated[StrictStr, Field(..., description="Required. Your Pitney Bowes developer ID.")], policy_created_from_date : Annotated[StrictStr, Field(..., description="The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, policy_created_to_date : Annotated[Optional[StrictStr], Field(description="The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset.")] = None, policy_reference_id : Annotated[Optional[StrictStr], Field(description="The unique identifier for the PB Parcel Protection policy.].")] = None, parcel_tracking_number : Annotated[Optional[StrictStr], Field(description="The parcel tracking number of the shipment that the policy applies to.")] = None, merchant_id : Annotated[Optional[StrictStr], Field(description="The merchant's Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object.")] = None, policy_status : Annotated[Optional[StrictStr], Field(description="Whether the policy is active or voided.")] = None, size : Annotated[Optional[StrictStr], Field(description="The number of transactions to return per page in the result set.")] = None, page : Annotated[Optional[StrictStr], Field(description="The index number of the page to return. Page index numbering starts at 0. Specifying page=0 returns the first page of the result set.")] = None, sort : Annotated[Optional[StrictStr], Field(description="Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc).")] = None, **kwargs) -> ParcelProtectionPolicyResponse:  # noqa: E501
        """Parcel Protection Reports  # noqa: E501

        This operation retrieves the policy status and other information on the Parcel Protection policies you have purchased for your shipments. Further Details https://shipping.pitneybowes.com/api/get-parcel-protection-reports.html  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parcel_protection_reports(x_pb_transaction_id, developer_id, policy_created_from_date, x_pb_unified_error_structure, policy_created_to_date, policy_reference_id, parcel_tracking_number, merchant_id, policy_status, size, page, sort, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param developer_id: Required. Your Pitney Bowes developer ID. (required)
        :type developer_id: str
        :param policy_created_from_date: The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (required)
        :type policy_created_from_date: str
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param policy_created_to_date: The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset.
        :type policy_created_to_date: str
        :param policy_reference_id: The unique identifier for the PB Parcel Protection policy.].
        :type policy_reference_id: str
        :param parcel_tracking_number: The parcel tracking number of the shipment that the policy applies to.
        :type parcel_tracking_number: str
        :param merchant_id: The merchant's Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object.
        :type merchant_id: str
        :param policy_status: Whether the policy is active or voided.
        :type policy_status: str
        :param size: The number of transactions to return per page in the result set.
        :type size: str
        :param page: The index number of the page to return. Page index numbering starts at 0. Specifying page=0 returns the first page of the result set.
        :type page: str
        :param sort: Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc).
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ParcelProtectionPolicyResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_parcel_protection_reports_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_parcel_protection_reports_with_http_info(x_pb_transaction_id, developer_id, policy_created_from_date, x_pb_unified_error_structure, policy_created_to_date, policy_reference_id, parcel_tracking_number, merchant_id, policy_status, size, page, sort, **kwargs)  # noqa: E501

    @validate_arguments
    def get_parcel_protection_reports_with_http_info(self, x_pb_transaction_id : Annotated[StrictStr, Field(..., description="Required. A unique identifier for the transaction, up to 25 characters.")], developer_id : Annotated[StrictStr, Field(..., description="Required. Your Pitney Bowes developer ID.")], policy_created_from_date : Annotated[StrictStr, Field(..., description="The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset.")], x_pb_unified_error_structure : Annotated[Optional[StrictBool], Field(description="Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.")] = None, policy_created_to_date : Annotated[Optional[StrictStr], Field(description="The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset.")] = None, policy_reference_id : Annotated[Optional[StrictStr], Field(description="The unique identifier for the PB Parcel Protection policy.].")] = None, parcel_tracking_number : Annotated[Optional[StrictStr], Field(description="The parcel tracking number of the shipment that the policy applies to.")] = None, merchant_id : Annotated[Optional[StrictStr], Field(description="The merchant's Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object.")] = None, policy_status : Annotated[Optional[StrictStr], Field(description="Whether the policy is active or voided.")] = None, size : Annotated[Optional[StrictStr], Field(description="The number of transactions to return per page in the result set.")] = None, page : Annotated[Optional[StrictStr], Field(description="The index number of the page to return. Page index numbering starts at 0. Specifying page=0 returns the first page of the result set.")] = None, sort : Annotated[Optional[StrictStr], Field(description="Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Parcel Protection Reports  # noqa: E501

        This operation retrieves the policy status and other information on the Parcel Protection policies you have purchased for your shipments. Further Details https://shipping.pitneybowes.com/api/get-parcel-protection-reports.html  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_parcel_protection_reports_with_http_info(x_pb_transaction_id, developer_id, policy_created_from_date, x_pb_unified_error_structure, policy_created_to_date, policy_reference_id, parcel_tracking_number, merchant_id, policy_status, size, page, sort, async_req=True)
        >>> result = thread.get()

        :param x_pb_transaction_id: Required. A unique identifier for the transaction, up to 25 characters. (required)
        :type x_pb_transaction_id: str
        :param developer_id: Required. Your Pitney Bowes developer ID. (required)
        :type developer_id: str
        :param policy_created_from_date: The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (required)
        :type policy_created_from_date: str
        :param x_pb_unified_error_structure: Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs.
        :type x_pb_unified_error_structure: bool
        :param policy_created_to_date: The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset.
        :type policy_created_to_date: str
        :param policy_reference_id: The unique identifier for the PB Parcel Protection policy.].
        :type policy_reference_id: str
        :param parcel_tracking_number: The parcel tracking number of the shipment that the policy applies to.
        :type parcel_tracking_number: str
        :param merchant_id: The merchant's Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object.
        :type merchant_id: str
        :param policy_status: Whether the policy is active or voided.
        :type policy_status: str
        :param size: The number of transactions to return per page in the result set.
        :type size: str
        :param page: The index number of the page to return. Page index numbering starts at 0. Specifying page=0 returns the first page of the result set.
        :type page: str
        :param sort: Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc).
        :type sort: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ParcelProtectionPolicyResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_pb_transaction_id',
            'developer_id',
            'policy_created_from_date',
            'x_pb_unified_error_structure',
            'policy_created_to_date',
            'policy_reference_id',
            'parcel_tracking_number',
            'merchant_id',
            'policy_status',
            'size',
            'page',
            'sort'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parcel_protection_reports" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['developer_id']:
            _path_params['developerId'] = _params['developer_id']


        # process the query parameters
        _query_params = []
        if _params.get('policy_created_from_date') is not None:  # noqa: E501
            _query_params.append(('policyCreatedFromDate', _params['policy_created_from_date']))

        if _params.get('policy_created_to_date') is not None:  # noqa: E501
            _query_params.append(('policyCreatedToDate', _params['policy_created_to_date']))

        if _params.get('policy_reference_id') is not None:  # noqa: E501
            _query_params.append(('policyReferenceId', _params['policy_reference_id']))

        if _params.get('parcel_tracking_number') is not None:  # noqa: E501
            _query_params.append(('parcelTrackingNumber', _params['parcel_tracking_number']))

        if _params.get('merchant_id') is not None:  # noqa: E501
            _query_params.append(('merchantId', _params['merchant_id']))

        if _params.get('policy_status') is not None:  # noqa: E501
            _query_params.append(('policyStatus', _params['policy_status']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_pb_unified_error_structure']:
            _header_params['X-PB-UnifiedErrorStructure'] = _params['x_pb_unified_error_structure']

        if _params['x_pb_transaction_id']:
            _header_params['X-PB-TransactionId'] = _params['x_pb_transaction_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oAuth2ClientCredentials']  # noqa: E501

        _response_types_map = {
            '200': "ParcelProtectionPolicyResponse",
        }

        return self.api_client.call_api(
            '/shippingservices/v1/parcel-protection/{developerId}/policies', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
